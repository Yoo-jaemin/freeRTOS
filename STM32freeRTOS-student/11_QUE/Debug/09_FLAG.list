
09_FLAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047bc  080047bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080047bc  080047bc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047bc  080047bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080047c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  20000074  08004838  00020074  2**2
                  ALLOC
 10 .random       00000000  20000f5c  20000f5c  00020074  2**0
                  CONTENTS
 11 ._user_heap_stack 00000604  20000f5c  08004838  00020f5c  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e014  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002743  00000000  00000000  0002e0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000bb0  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a88  00000000  00000000  000313a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00019beb  00000000  00000000  00031e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a3af  00000000  00000000  0004ba1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008ac35  00000000  00000000  00055dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000e09ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003574  00000000  00000000  000e0a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fb8 	.word	0x08003fb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003fb8 	.word	0x08003fb8

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f923 	bl	80003ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	200f      	movs	r0, #15
 8000168:	f000 f808 	bl	800017c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f002 fd6e 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x54>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <HAL_InitTick+0x58>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	4619      	mov	r1, r3
 800018e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000192:	fbb3 f3f1 	udiv	r3, r3, r1
 8000196:	fbb2 f3f3 	udiv	r3, r2, r3
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f93b 	bl	8000416 <HAL_SYSTICK_Config>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e00e      	b.n	80001c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b0f      	cmp	r3, #15
 80001ae:	d80a      	bhi.n	80001c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001b0:	2200      	movs	r2, #0
 80001b2:	6879      	ldr	r1, [r7, #4]
 80001b4:	f04f 30ff 	mov.w	r0, #4294967295
 80001b8:	f000 f903 	bl	80003c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <HAL_InitTick+0x5c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001c2:	2300      	movs	r3, #0
 80001c4:	e000      	b.n	80001c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	20000004 	.word	0x20000004
 80001d8:	20000000 	.word	0x20000000

080001dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x1c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <HAL_IncTick+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4413      	add	r3, r2
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <HAL_IncTick+0x20>)
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	20000004 	.word	0x20000004
 80001fc:	20000eec 	.word	0x20000eec

08000200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return uwTick;
 8000204:	4b02      	ldr	r3, [pc, #8]	; (8000210 <HAL_GetTick+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000eec 	.word	0x20000eec

08000214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f003 0307 	and.w	r3, r3, #7
 8000222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__NVIC_SetPriorityGrouping+0x44>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000230:	4013      	ands	r3, r2
 8000232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000246:	4a04      	ldr	r2, [pc, #16]	; (8000258 <__NVIC_SetPriorityGrouping+0x44>)
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	60d3      	str	r3, [r2, #12]
}
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__NVIC_GetPriorityGrouping+0x18>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	f003 0307 	and.w	r3, r3, #7
}
 800026a:	4618      	mov	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	2b00      	cmp	r3, #0
 8000288:	db0b      	blt.n	80002a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 021f 	and.w	r2, r3, #31
 8000290:	4906      	ldr	r1, [pc, #24]	; (80002ac <__NVIC_EnableIRQ+0x34>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	2001      	movs	r0, #1
 800029a:	fa00 f202 	lsl.w	r2, r0, r2
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	db0a      	blt.n	80002da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	490c      	ldr	r1, [pc, #48]	; (80002fc <__NVIC_SetPriority+0x4c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d8:	e00a      	b.n	80002f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	; (8000300 <__NVIC_SetPriority+0x50>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3b04      	subs	r3, #4
 80002e8:	0112      	lsls	r2, r2, #4
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	761a      	strb	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000304:	b480      	push	{r7}
 8000306:	b089      	sub	sp, #36	; 0x24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000318:	69fb      	ldr	r3, [r7, #28]
 800031a:	f1c3 0307 	rsb	r3, r3, #7
 800031e:	2b04      	cmp	r3, #4
 8000320:	bf28      	it	cs
 8000322:	2304      	movcs	r3, #4
 8000324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000326:	69fb      	ldr	r3, [r7, #28]
 8000328:	3304      	adds	r3, #4
 800032a:	2b06      	cmp	r3, #6
 800032c:	d902      	bls.n	8000334 <NVIC_EncodePriority+0x30>
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3b03      	subs	r3, #3
 8000332:	e000      	b.n	8000336 <NVIC_EncodePriority+0x32>
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000338:	f04f 32ff 	mov.w	r2, #4294967295
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	43da      	mvns	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	401a      	ands	r2, r3
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800034c:	f04f 31ff 	mov.w	r1, #4294967295
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43d9      	mvns	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800035c:	4313      	orrs	r3, r2
         );
}
 800035e:	4618      	mov	r0, r3
 8000360:	3724      	adds	r7, #36	; 0x24
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000378:	d301      	bcc.n	800037e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800037a:	2301      	movs	r3, #1
 800037c:	e00f      	b.n	800039e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <SysTick_Config+0x40>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3b01      	subs	r3, #1
 8000384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000386:	210f      	movs	r1, #15
 8000388:	f04f 30ff 	mov.w	r0, #4294967295
 800038c:	f7ff ff90 	bl	80002b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <SysTick_Config+0x40>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <SysTick_Config+0x40>)
 8000398:	2207      	movs	r2, #7
 800039a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800039c:	2300      	movs	r3, #0
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	e000e010 	.word	0xe000e010

080003ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff2d 	bl	8000214 <__NVIC_SetPriorityGrouping>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b086      	sub	sp, #24
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	4603      	mov	r3, r0
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]
 80003ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d4:	f7ff ff42 	bl	800025c <__NVIC_GetPriorityGrouping>
 80003d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	6978      	ldr	r0, [r7, #20]
 80003e0:	f7ff ff90 	bl	8000304 <NVIC_EncodePriority>
 80003e4:	4602      	mov	r2, r0
 80003e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff5f 	bl	80002b0 <__NVIC_SetPriority>
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff35 	bl	8000278 <__NVIC_EnableIRQ>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ffa2 	bl	8000368 <SysTick_Config>
 8000424:	4603      	mov	r3, r0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000430:	b480      	push	{r7}
 8000432:	b08b      	sub	sp, #44	; 0x2c
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000442:	e127      	b.n	8000694 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000444:	2201      	movs	r2, #1
 8000446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	69fa      	ldr	r2, [r7, #28]
 8000454:	4013      	ands	r3, r2
 8000456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000458:	69ba      	ldr	r2, [r7, #24]
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	429a      	cmp	r2, r3
 800045e:	f040 8116 	bne.w	800068e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	2b12      	cmp	r3, #18
 8000468:	d034      	beq.n	80004d4 <HAL_GPIO_Init+0xa4>
 800046a:	2b12      	cmp	r3, #18
 800046c:	d80d      	bhi.n	800048a <HAL_GPIO_Init+0x5a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d02b      	beq.n	80004ca <HAL_GPIO_Init+0x9a>
 8000472:	2b02      	cmp	r3, #2
 8000474:	d804      	bhi.n	8000480 <HAL_GPIO_Init+0x50>
 8000476:	2b00      	cmp	r3, #0
 8000478:	d031      	beq.n	80004de <HAL_GPIO_Init+0xae>
 800047a:	2b01      	cmp	r3, #1
 800047c:	d01c      	beq.n	80004b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047e:	e048      	b.n	8000512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000480:	2b03      	cmp	r3, #3
 8000482:	d043      	beq.n	800050c <HAL_GPIO_Init+0xdc>
 8000484:	2b11      	cmp	r3, #17
 8000486:	d01b      	beq.n	80004c0 <HAL_GPIO_Init+0x90>
          break;
 8000488:	e043      	b.n	8000512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800048a:	4a89      	ldr	r2, [pc, #548]	; (80006b0 <HAL_GPIO_Init+0x280>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d026      	beq.n	80004de <HAL_GPIO_Init+0xae>
 8000490:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x280>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d806      	bhi.n	80004a4 <HAL_GPIO_Init+0x74>
 8000496:	4a87      	ldr	r2, [pc, #540]	; (80006b4 <HAL_GPIO_Init+0x284>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d020      	beq.n	80004de <HAL_GPIO_Init+0xae>
 800049c:	4a86      	ldr	r2, [pc, #536]	; (80006b8 <HAL_GPIO_Init+0x288>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d01d      	beq.n	80004de <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e036      	b.n	8000512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a4:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x28c>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d019      	beq.n	80004de <HAL_GPIO_Init+0xae>
 80004aa:	4a85      	ldr	r2, [pc, #532]	; (80006c0 <HAL_GPIO_Init+0x290>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d016      	beq.n	80004de <HAL_GPIO_Init+0xae>
 80004b0:	4a84      	ldr	r2, [pc, #528]	; (80006c4 <HAL_GPIO_Init+0x294>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d013      	beq.n	80004de <HAL_GPIO_Init+0xae>
          break;
 80004b6:	e02c      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e028      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	3304      	adds	r3, #4
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e023      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	3308      	adds	r3, #8
 80004d0:	623b      	str	r3, [r7, #32]
          break;
 80004d2:	e01e      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	330c      	adds	r3, #12
 80004da:	623b      	str	r3, [r7, #32]
          break;
 80004dc:	e019      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e6:	2304      	movs	r3, #4
 80004e8:	623b      	str	r3, [r7, #32]
          break;
 80004ea:	e012      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d105      	bne.n	8000500 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f4:	2308      	movs	r3, #8
 80004f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	69fa      	ldr	r2, [r7, #28]
 80004fc:	611a      	str	r2, [r3, #16]
          break;
 80004fe:	e008      	b.n	8000512 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000500:	2308      	movs	r3, #8
 8000502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	69fa      	ldr	r2, [r7, #28]
 8000508:	615a      	str	r2, [r3, #20]
          break;
 800050a:	e002      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
          break;
 8000510:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	2bff      	cmp	r3, #255	; 0xff
 8000516:	d801      	bhi.n	800051c <HAL_GPIO_Init+0xec>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	e001      	b.n	8000520 <HAL_GPIO_Init+0xf0>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3304      	adds	r3, #4
 8000520:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	2bff      	cmp	r3, #255	; 0xff
 8000526:	d802      	bhi.n	800052e <HAL_GPIO_Init+0xfe>
 8000528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	e002      	b.n	8000534 <HAL_GPIO_Init+0x104>
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	3b08      	subs	r3, #8
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	210f      	movs	r1, #15
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	401a      	ands	r2, r3
 8000546:	6a39      	ldr	r1, [r7, #32]
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	2b00      	cmp	r3, #0
 800055e:	f000 8096 	beq.w	800068e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000562:	4b59      	ldr	r3, [pc, #356]	; (80006c8 <HAL_GPIO_Init+0x298>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a58      	ldr	r2, [pc, #352]	; (80006c8 <HAL_GPIO_Init+0x298>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <HAL_GPIO_Init+0x298>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800057a:	4a54      	ldr	r2, [pc, #336]	; (80006cc <HAL_GPIO_Init+0x29c>)
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	3302      	adds	r3, #2
 8000582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000586:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058a:	f003 0303 	and.w	r3, r3, #3
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	220f      	movs	r2, #15
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a4b      	ldr	r2, [pc, #300]	; (80006d0 <HAL_GPIO_Init+0x2a0>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d013      	beq.n	80005ce <HAL_GPIO_Init+0x19e>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <HAL_GPIO_Init+0x2a4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00d      	beq.n	80005ca <HAL_GPIO_Init+0x19a>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a49      	ldr	r2, [pc, #292]	; (80006d8 <HAL_GPIO_Init+0x2a8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d007      	beq.n	80005c6 <HAL_GPIO_Init+0x196>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a48      	ldr	r2, [pc, #288]	; (80006dc <HAL_GPIO_Init+0x2ac>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_GPIO_Init+0x192>
 80005be:	2303      	movs	r3, #3
 80005c0:	e006      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005c2:	2304      	movs	r3, #4
 80005c4:	e004      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005c6:	2302      	movs	r3, #2
 80005c8:	e002      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005ca:	2301      	movs	r3, #1
 80005cc:	e000      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005ce:	2300      	movs	r3, #0
 80005d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d2:	f002 0203 	and.w	r2, r2, #3
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	4093      	lsls	r3, r2
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4313      	orrs	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005e0:	493a      	ldr	r1, [pc, #232]	; (80006cc <HAL_GPIO_Init+0x29c>)
 80005e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	3302      	adds	r3, #2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005fa:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4938      	ldr	r1, [pc, #224]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	4313      	orrs	r3, r2
 8000604:	600b      	str	r3, [r1, #0]
 8000606:	e006      	b.n	8000616 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	43db      	mvns	r3, r3
 8000610:	4933      	ldr	r1, [pc, #204]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	492e      	ldr	r1, [pc, #184]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	4313      	orrs	r3, r2
 800062c:	604b      	str	r3, [r1, #4]
 800062e:	e006      	b.n	800063e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	43db      	mvns	r3, r3
 8000638:	4929      	ldr	r1, [pc, #164]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800063a:	4013      	ands	r3, r2
 800063c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	4924      	ldr	r1, [pc, #144]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	4313      	orrs	r3, r2
 8000654:	608b      	str	r3, [r1, #8]
 8000656:	e006      	b.n	8000666 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	43db      	mvns	r3, r3
 8000660:	491f      	ldr	r1, [pc, #124]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000662:	4013      	ands	r3, r2
 8000664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	491a      	ldr	r1, [pc, #104]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	4313      	orrs	r3, r2
 800067c:	60cb      	str	r3, [r1, #12]
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	43db      	mvns	r3, r3
 8000688:	4915      	ldr	r1, [pc, #84]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800068a:	4013      	ands	r3, r2
 800068c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	3301      	adds	r3, #1
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	fa22 f303 	lsr.w	r3, r2, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f47f aed0 	bne.w	8000444 <HAL_GPIO_Init+0x14>
  }
}
 80006a4:	bf00      	nop
 80006a6:	372c      	adds	r7, #44	; 0x2c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	10210000 	.word	0x10210000
 80006b4:	10110000 	.word	0x10110000
 80006b8:	10120000 	.word	0x10120000
 80006bc:	10310000 	.word	0x10310000
 80006c0:	10320000 	.word	0x10320000
 80006c4:	10220000 	.word	0x10220000
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40011400 	.word	0x40011400
 80006e0:	40010400 	.word	0x40010400

080006e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
 80006f0:	4613      	mov	r3, r2
 80006f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f4:	787b      	ldrb	r3, [r7, #1]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006fa:	887a      	ldrh	r2, [r7, #2]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000700:	e003      	b.n	800070a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	041a      	lsls	r2, r3, #16
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	611a      	str	r2, [r3, #16]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	4013      	ands	r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f806 	bl	8000744 <HAL_GPIO_EXTI_Callback>
  }
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40010400 	.word	0x40010400

08000744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e26c      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	f000 8087 	beq.w	8000886 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000778:	4b92      	ldr	r3, [pc, #584]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	2b04      	cmp	r3, #4
 8000782:	d00c      	beq.n	800079e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000784:	4b8f      	ldr	r3, [pc, #572]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b08      	cmp	r3, #8
 800078e:	d112      	bne.n	80007b6 <HAL_RCC_OscConfig+0x5e>
 8000790:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079c:	d10b      	bne.n	80007b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079e:	4b89      	ldr	r3, [pc, #548]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d06c      	beq.n	8000884 <HAL_RCC_OscConfig+0x12c>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d168      	bne.n	8000884 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e246      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007be:	d106      	bne.n	80007ce <HAL_RCC_OscConfig+0x76>
 80007c0:	4b80      	ldr	r3, [pc, #512]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a7f      	ldr	r2, [pc, #508]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	e02e      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10c      	bne.n	80007f0 <HAL_RCC_OscConfig+0x98>
 80007d6:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a7a      	ldr	r2, [pc, #488]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b78      	ldr	r3, [pc, #480]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a77      	ldr	r2, [pc, #476]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	e01d      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f8:	d10c      	bne.n	8000814 <HAL_RCC_OscConfig+0xbc>
 80007fa:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a71      	ldr	r2, [pc, #452]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a6e      	ldr	r2, [pc, #440]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e00b      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 8000814:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a6a      	ldr	r2, [pc, #424]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800081a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b68      	ldr	r3, [pc, #416]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a67      	ldr	r2, [pc, #412]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d013      	beq.n	800085c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000834:	f7ff fce4 	bl	8000200 <HAL_GetTick>
 8000838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083a:	e008      	b.n	800084e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800083c:	f7ff fce0 	bl	8000200 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b64      	cmp	r3, #100	; 0x64
 8000848:	d901      	bls.n	800084e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800084a:	2303      	movs	r3, #3
 800084c:	e1fa      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084e:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f0      	beq.n	800083c <HAL_RCC_OscConfig+0xe4>
 800085a:	e014      	b.n	8000886 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800085c:	f7ff fcd0 	bl	8000200 <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000862:	e008      	b.n	8000876 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000864:	f7ff fccc 	bl	8000200 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b64      	cmp	r3, #100	; 0x64
 8000870:	d901      	bls.n	8000876 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e1e6      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f0      	bne.n	8000864 <HAL_RCC_OscConfig+0x10c>
 8000882:	e000      	b.n	8000886 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d063      	beq.n	800095a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00b      	beq.n	80008b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800089e:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d11c      	bne.n	80008e4 <HAL_RCC_OscConfig+0x18c>
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d116      	bne.n	80008e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <HAL_RCC_OscConfig+0x176>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d001      	beq.n	80008ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e1ba      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4939      	ldr	r1, [pc, #228]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008de:	4313      	orrs	r3, r2
 80008e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e2:	e03a      	b.n	800095a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d020      	beq.n	800092e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <HAL_RCC_OscConfig+0x270>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fc85 	bl	8000200 <HAL_GetTick>
 80008f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008fa:	f7ff fc81 	bl	8000200 <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e19b      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f0      	beq.n	80008fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	4927      	ldr	r1, [pc, #156]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000928:	4313      	orrs	r3, r2
 800092a:	600b      	str	r3, [r1, #0]
 800092c:	e015      	b.n	800095a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <HAL_RCC_OscConfig+0x270>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000934:	f7ff fc64 	bl	8000200 <HAL_GetTick>
 8000938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	e008      	b.n	800094e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff fc60 	bl	8000200 <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b02      	cmp	r3, #2
 8000948:	d901      	bls.n	800094e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e17a      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f0      	bne.n	800093c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	2b00      	cmp	r3, #0
 8000964:	d03a      	beq.n	80009dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d019      	beq.n	80009a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_RCC_OscConfig+0x274>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000974:	f7ff fc44 	bl	8000200 <HAL_GetTick>
 8000978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	e008      	b.n	800098e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800097c:	f7ff fc40 	bl	8000200 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d901      	bls.n	800098e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e15a      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f0      	beq.n	800097c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f000 fada 	bl	8000f54 <RCC_Delay>
 80009a0:	e01c      	b.n	80009dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_RCC_OscConfig+0x274>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a8:	f7ff fc2a 	bl	8000200 <HAL_GetTick>
 80009ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ae:	e00f      	b.n	80009d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009b0:	f7ff fc26 	bl	8000200 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d908      	bls.n	80009d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e140      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	42420000 	.word	0x42420000
 80009cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d0:	4b9e      	ldr	r3, [pc, #632]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e9      	bne.n	80009b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80a6 	beq.w	8000b36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ee:	4b97      	ldr	r3, [pc, #604]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10d      	bne.n	8000a16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b94      	ldr	r3, [pc, #592]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a93      	ldr	r2, [pc, #588]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b91      	ldr	r3, [pc, #580]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a12:	2301      	movs	r3, #1
 8000a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a16:	4b8e      	ldr	r3, [pc, #568]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d118      	bne.n	8000a54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a22:	4b8b      	ldr	r3, [pc, #556]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a8a      	ldr	r2, [pc, #552]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fbe7 	bl	8000200 <HAL_GetTick>
 8000a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	e008      	b.n	8000a48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a36:	f7ff fbe3 	bl	8000200 <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b64      	cmp	r3, #100	; 0x64
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e0fd      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a48:	4b81      	ldr	r3, [pc, #516]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f0      	beq.n	8000a36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <HAL_RCC_OscConfig+0x312>
 8000a5c:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a7a      	ldr	r2, [pc, #488]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6213      	str	r3, [r2, #32]
 8000a68:	e02d      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10c      	bne.n	8000a8c <HAL_RCC_OscConfig+0x334>
 8000a72:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a75      	ldr	r2, [pc, #468]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6213      	str	r3, [r2, #32]
 8000a7e:	4b73      	ldr	r3, [pc, #460]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a72      	ldr	r2, [pc, #456]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a84:	f023 0304 	bic.w	r3, r3, #4
 8000a88:	6213      	str	r3, [r2, #32]
 8000a8a:	e01c      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d10c      	bne.n	8000aae <HAL_RCC_OscConfig+0x356>
 8000a94:	4b6d      	ldr	r3, [pc, #436]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	4a6c      	ldr	r2, [pc, #432]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6213      	str	r3, [r2, #32]
 8000aa0:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4a69      	ldr	r2, [pc, #420]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6213      	str	r3, [r2, #32]
 8000aac:	e00b      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000aae:	4b67      	ldr	r3, [pc, #412]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a66      	ldr	r2, [pc, #408]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6213      	str	r3, [r2, #32]
 8000aba:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a63      	ldr	r2, [pc, #396]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
 8000ac4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d015      	beq.n	8000afa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ace:	f7ff fb97 	bl	8000200 <HAL_GetTick>
 8000ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	e00a      	b.n	8000aec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fb93 	bl	8000200 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d901      	bls.n	8000aec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e0ab      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0ee      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x37e>
 8000af8:	e014      	b.n	8000b24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afa:	f7ff fb81 	bl	8000200 <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b00:	e00a      	b.n	8000b18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fb7d 	bl	8000200 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e095      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b18:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1ee      	bne.n	8000b02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d105      	bne.n	8000b36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b2a:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a47      	ldr	r2, [pc, #284]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8081 	beq.w	8000c42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b40:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 030c 	and.w	r3, r3, #12
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d061      	beq.n	8000c10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d146      	bne.n	8000be2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <HAL_RCC_OscConfig+0x4fc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fb51 	bl	8000200 <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b62:	f7ff fb4d 	bl	8000200 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e067      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f0      	bne.n	8000b62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d108      	bne.n	8000b9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	492d      	ldr	r1, [pc, #180]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a19      	ldr	r1, [r3, #32]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	430b      	orrs	r3, r1
 8000bae:	4927      	ldr	r1, [pc, #156]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_RCC_OscConfig+0x4fc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bba:	f7ff fb21 	bl	8000200 <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bc2:	f7ff fb1d 	bl	8000200 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e037      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x46a>
 8000be0:	e02f      	b.n	8000c42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_RCC_OscConfig+0x4fc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fb0a 	bl	8000200 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf0:	f7ff fb06 	bl	8000200 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e020      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x498>
 8000c0e:	e018      	b.n	8000c42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e013      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d106      	bne.n	8000c3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d001      	beq.n	8000c42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40007000 	.word	0x40007000
 8000c54:	42420060 	.word	0x42420060

08000c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0d0      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c6c:	4b6a      	ldr	r3, [pc, #424]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d910      	bls.n	8000c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7a:	4b67      	ldr	r3, [pc, #412]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 0207 	bic.w	r2, r3, #7
 8000c82:	4965      	ldr	r1, [pc, #404]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8a:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d001      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0b8      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d020      	beq.n	8000cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb4:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd8:	4b50      	ldr	r3, [pc, #320]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	494d      	ldr	r1, [pc, #308]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d040      	beq.n	8000d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d115      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e07f      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d107      	bne.n	8000d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d109      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e073      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e06b      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f023 0203 	bic.w	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4936      	ldr	r1, [pc, #216]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d48:	f7ff fa5a 	bl	8000200 <HAL_GetTick>
 8000d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4e:	e00a      	b.n	8000d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d50:	f7ff fa56 	bl	8000200 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e053      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 020c 	and.w	r2, r3, #12
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d1eb      	bne.n	8000d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d210      	bcs.n	8000da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 0207 	bic.w	r2, r3, #7
 8000d8e:	4922      	ldr	r1, [pc, #136]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e032      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4916      	ldr	r1, [pc, #88]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d009      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000de6:	f000 f821 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 8000dea:	4601      	mov	r1, r0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_RCC_ClockConfig+0x1c8>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_RCC_ClockConfig+0x1cc>)
 8000e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_RCC_ClockConfig+0x1d0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9b8 	bl	800017c <HAL_InitTick>

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40022000 	.word	0x40022000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	0800470c 	.word	0x0800470c
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	20000000 	.word	0x20000000

08000e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e2c:	b490      	push	{r4, r7}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e34:	1d3c      	adds	r4, r7, #4
 8000e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d002      	beq.n	8000e6c <HAL_RCC_GetSysClockFreq+0x40>
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d003      	beq.n	8000e72 <HAL_RCC_GetSysClockFreq+0x46>
 8000e6a:	e02d      	b.n	8000ec8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e6e:	623b      	str	r3, [r7, #32]
      break;
 8000e70:	e02d      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	0c9b      	lsrs	r3, r3, #18
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e7e:	4413      	add	r3, r2
 8000e80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	0c5b      	lsrs	r3, r3, #17
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ea4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eaa:	fb02 f203 	mul.w	r2, r2, r3
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	e004      	b.n	8000ec2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	623b      	str	r3, [r7, #32]
      break;
 8000ec6:	e002      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eca:	623b      	str	r3, [r7, #32]
      break;
 8000ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ece:	6a3b      	ldr	r3, [r7, #32]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc90      	pop	{r4, r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	08003fd0 	.word	0x08003fd0
 8000ee0:	08003fe0 	.word	0x08003fe0
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	007a1200 	.word	0x007a1200
 8000eec:	003d0900 	.word	0x003d0900

08000ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	2000000c 	.word	0x2000000c

08000f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f08:	f7ff fff2 	bl	8000ef0 <HAL_RCC_GetHCLKFreq>
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	0800471c 	.word	0x0800471c

08000f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_RCC_GetHCLKFreq>
 8000f34:	4601      	mov	r1, r0
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	0adb      	lsrs	r3, r3, #11
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	0800471c 	.word	0x0800471c

08000f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <RCC_Delay+0x34>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <RCC_Delay+0x38>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0a5b      	lsrs	r3, r3, #9
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f70:	bf00      	nop
  }
  while (Delay --);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	60fa      	str	r2, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f9      	bne.n	8000f70 <RCC_Delay+0x1c>
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	10624dd3 	.word	0x10624dd3

08000f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e03f      	b.n	8001022 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fe80 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2224      	movs	r2, #36	; 0x24
 8000fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f905 	bl	80011e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b08a      	sub	sp, #40	; 0x28
 800102e:	af02      	add	r7, sp, #8
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4613      	mov	r3, r2
 8001038:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b20      	cmp	r3, #32
 8001048:	d17c      	bne.n	8001144 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_UART_Transmit+0x2c>
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e075      	b.n	8001146 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_UART_Transmit+0x3e>
 8001064:	2302      	movs	r3, #2
 8001066:	e06e      	b.n	8001146 <HAL_UART_Transmit+0x11c>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2221      	movs	r2, #33	; 0x21
 800107a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800107e:	f7ff f8bf 	bl	8000200 <HAL_GetTick>
 8001082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	88fa      	ldrh	r2, [r7, #6]
 8001088:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001098:	d108      	bne.n	80010ac <HAL_UART_Transmit+0x82>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d104      	bne.n	80010ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	e003      	b.n	80010b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80010bc:	e02a      	b.n	8001114 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f840 	bl	800114e <UART_WaitOnFlagUntilTimeout>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e036      	b.n	8001146 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10b      	bne.n	80010f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	3302      	adds	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	e007      	b.n	8001106 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	3301      	adds	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800110a:	b29b      	uxth	r3, r3
 800110c:	3b01      	subs	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001118:	b29b      	uxth	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1cf      	bne.n	80010be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2200      	movs	r2, #0
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 f810 	bl	800114e <UART_WaitOnFlagUntilTimeout>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e006      	b.n	8001146 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2220      	movs	r2, #32
 800113c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001144:	2302      	movs	r3, #2
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4613      	mov	r3, r2
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800115e:	e02c      	b.n	80011ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001166:	d028      	beq.n	80011ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <UART_WaitOnFlagUntilTimeout+0x30>
 800116e:	f7ff f847 	bl	8000200 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	429a      	cmp	r2, r3
 800117c:	d21d      	bcs.n	80011ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800118c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2220      	movs	r2, #32
 80011a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e00f      	b.n	80011da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4013      	ands	r3, r2
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d0c3      	beq.n	8001160 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800121e:	f023 030c 	bic.w	r3, r3, #12
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	430b      	orrs	r3, r1
 800122a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a2c      	ldr	r2, [pc, #176]	; (80012f8 <UART_SetConfig+0x114>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d103      	bne.n	8001254 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800124c:	f7ff fe6e 	bl	8000f2c <HAL_RCC_GetPCLK2Freq>
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	e002      	b.n	800125a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001254:	f7ff fe56 	bl	8000f04 <HAL_RCC_GetPCLK1Freq>
 8001258:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009a      	lsls	r2, r3, #2
 8001264:	441a      	add	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <UART_SetConfig+0x118>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	0119      	lsls	r1, r3, #4
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009a      	lsls	r2, r3, #2
 8001284:	441a      	add	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <UART_SetConfig+0x118>)
 8001292:	fba3 0302 	umull	r0, r3, r3, r2
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	fb00 f303 	mul.w	r3, r0, r3
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	3332      	adds	r3, #50	; 0x32
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <UART_SetConfig+0x118>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b0:	4419      	add	r1, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	009a      	lsls	r2, r3, #2
 80012bc:	441a      	add	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <UART_SetConfig+0x118>)
 80012ca:	fba3 0302 	umull	r0, r3, r3, r2
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	fb00 f303 	mul.w	r3, r0, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	3332      	adds	r3, #50	; 0x32
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <UART_SetConfig+0x118>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	f003 020f 	and.w	r2, r3, #15
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	440a      	add	r2, r1
 80012ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013800 	.word	0x40013800
 80012fc:	51eb851f 	.word	0x51eb851f

08001300 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001304:	f000 fb9a 	bl	8001a3c <vTaskStartScheduler>
  
  return osOK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}

0800130e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8001314:	2018      	movs	r0, #24
 8001316:	f001 f929 	bl	800256c <pvPortMalloc>
 800131a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3304      	adds	r3, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f979 	bl	8001624 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8001332:	687b      	ldr	r3, [r7, #4]
	}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800135c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001360:	f383 8811 	msr	BASEPRI, r3
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	623b      	str	r3, [r7, #32]
 800136e:	e7fe      	b.n	800136e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <xEventGroupWaitBits+0x52>
 800137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	e7fe      	b.n	800138c <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <xEventGroupWaitBits+0x6c>
 8001394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001398:	f383 8811 	msr	BASEPRI, r3
 800139c:	f3bf 8f6f 	isb	sy
 80013a0:	f3bf 8f4f 	dsb	sy
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	e7fe      	b.n	80013a6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80013a8:	f000 fea0 	bl	80020ec <xTaskGetSchedulerState>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <xEventGroupWaitBits+0x7c>
 80013b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <xEventGroupWaitBits+0x80>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <xEventGroupWaitBits+0x82>
 80013bc:	2300      	movs	r3, #0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <xEventGroupWaitBits+0x9a>
 80013c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c6:	f383 8811 	msr	BASEPRI, r3
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	f3bf 8f4f 	dsb	sy
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e7fe      	b.n	80013d4 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80013d6:	f000 fb77 	bl	8001ac8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013e6:	f000 f8fc 	bl	80015e2 <prvTestWaitCondition>
 80013ea:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00e      	beq.n	8001410 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d028      	beq.n	8001452 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	43db      	mvns	r3, r3
 8001408:	401a      	ands	r2, r3
 800140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e020      	b.n	8001452 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8001410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800141a:	2301      	movs	r3, #1
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
 800141e:	e018      	b.n	8001452 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8001426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8001434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	1d18      	adds	r0, r3, #4
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001444:	4313      	orrs	r3, r2
 8001446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001448:	4619      	mov	r1, r3
 800144a:	f000 fcfd 	bl	8001e48 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8001452:	f000 fb47 	bl	8001ae4 <xTaskResumeAll>
 8001456:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8001458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800145a:	2b00      	cmp	r3, #0
 800145c:	d031      	beq.n	80014c2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	2b00      	cmp	r3, #0
 8001462:	d107      	bne.n	8001474 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <xEventGroupWaitBits+0x190>)
 8001466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8001474:	f000 fe58 	bl	8002128 <uxTaskResetEventItemValue>
 8001478:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800147a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d11a      	bne.n	80014ba <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8001484:	f000 ffb8 	bl	80023f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001494:	f000 f8a5 	bl	80015e2 <prvTestWaitCondition>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	401a      	ands	r2, r3
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80014b2:	2301      	movs	r3, #1
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80014b6:	f000 ffcd 	bl	8002454 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80014ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80014c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3740      	adds	r7, #64	; 0x40
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	e000ed04 	.word	0xe000ed04

080014d0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <xEventGroupSetBits+0x30>
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	e7fe      	b.n	80014fe <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <xEventGroupSetBits+0x4e>
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e7fe      	b.n	800151c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	3304      	adds	r3, #4
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800152a:	f000 facd 	bl	8001ac8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	431a      	orrs	r2, r3
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8001540:	e03c      	b.n	80015bc <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8001542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001558:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001560:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d108      	bne.n	800157e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8001578:	2301      	movs	r3, #1
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157c:	e008      	b.n	8001590 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	429a      	cmp	r2, r3
 800158a:	d101      	bne.n	8001590 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	2b00      	cmp	r3, #0
 8001594:	d010      	beq.n	80015b8 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80015a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b0:	4619      	mov	r1, r3
 80015b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015b4:	f000 fc82 	bl	8001ebc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80015bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1be      	bne.n	8001542 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	43db      	mvns	r3, r3
 80015cc:	401a      	ands	r2, r3
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80015d2:	f000 fa87 	bl	8001ae4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	681b      	ldr	r3, [r3, #0]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3738      	adds	r7, #56	; 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80015e2:	b480      	push	{r7}
 80015e4:	b087      	sub	sp, #28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e007      	b.n	8001618 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4013      	ands	r3, r2
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	429a      	cmp	r2, r3
 8001612:	d101      	bne.n	8001618 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8001618:	697b      	ldr	r3, [r7, #20]
}
 800161a:	4618      	mov	r0, r3
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 0208 	add.w	r2, r3, #8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f103 0208 	add.w	r2, r3, #8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 0208 	add.w	r2, r3, #8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d6:	d103      	bne.n	80016e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e00c      	b.n	80016fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3308      	adds	r3, #8
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e002      	b.n	80016ee <vListInsert+0x2e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d2f6      	bcs.n	80016e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6892      	ldr	r2, [r2, #8]
 8001746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6852      	ldr	r2, [r2, #4]
 8001750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d103      	bne.n	8001764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001782:	b580      	push	{r7, lr}
 8001784:	b08c      	sub	sp, #48	; 0x30
 8001786:	af04      	add	r7, sp, #16
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fee8 	bl	800256c <pvPortMalloc>
 800179c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00e      	beq.n	80017c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80017a4:	2054      	movs	r0, #84	; 0x54
 80017a6:	f000 fee1 	bl	800256c <pvPortMalloc>
 80017aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
 80017b8:	e005      	b.n	80017c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f000 ff98 	bl	80026f0 <vPortFree>
 80017c0:	e001      	b.n	80017c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9303      	str	r3, [sp, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f80e 	bl	8001804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80017e8:	69f8      	ldr	r0, [r7, #28]
 80017ea:	f000 f889 	bl	8001900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	e002      	b.n	80017fa <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80017fa:	69bb      	ldr	r3, [r7, #24]
	}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800181c:	3b01      	subs	r3, #1
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f023 0307 	bic.w	r3, r3, #7
 800182a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <prvInitialiseNewTask+0x46>
 8001836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183a:	f383 8811 	msr	BASEPRI, r3
 800183e:	f3bf 8f6f 	isb	sy
 8001842:	f3bf 8f4f 	dsb	sy
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e7fe      	b.n	8001848 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e012      	b.n	8001876 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	7819      	ldrb	r1, [r3, #0]
 8001858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	3334      	adds	r3, #52	; 0x34
 8001860:	460a      	mov	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d9e9      	bls.n	8001850 <prvInitialiseNewTask+0x4c>
 800187c:	e000      	b.n	8001880 <prvInitialiseNewTask+0x7c>
		{
			break;
 800187e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	2b13      	cmp	r3, #19
 800188c:	d901      	bls.n	8001892 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800188e:	2313      	movs	r3, #19
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a0:	2200      	movs	r2, #0
 80018a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	3304      	adds	r3, #4
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff feda 	bl	8001662 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b0:	3318      	adds	r3, #24
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fed5 	bl	8001662 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	f1c3 0214 	rsb	r2, r3, #20
 80018c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	2200      	movs	r2, #0
 80018d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	69b8      	ldr	r0, [r7, #24]
 80018e2:	f000 fc9f 	bl	8002224 <pxPortInitialiseStack>
 80018e6:	4602      	mov	r2, r0
 80018e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001908:	f000 fd76 	bl	80023f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <prvAddNewTaskToReadyList+0xb8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <prvAddNewTaskToReadyList+0xb8>)
 8001914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <prvAddNewTaskToReadyList+0xbc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800191e:	4a27      	ldr	r2, [pc, #156]	; (80019bc <prvAddNewTaskToReadyList+0xbc>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <prvAddNewTaskToReadyList+0xb8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d110      	bne.n	800194e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800192c:	f000 fb3e 	bl	8001fac <prvInitialiseTaskLists>
 8001930:	e00d      	b.n	800194e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <prvAddNewTaskToReadyList+0xc0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <prvAddNewTaskToReadyList+0xbc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	429a      	cmp	r2, r3
 8001946:	d802      	bhi.n	800194e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <prvAddNewTaskToReadyList+0xbc>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <prvAddNewTaskToReadyList+0xc4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <prvAddNewTaskToReadyList+0xc4>)
 8001956:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	2201      	movs	r2, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <prvAddNewTaskToReadyList+0xc8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4313      	orrs	r3, r2
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <prvAddNewTaskToReadyList+0xc8>)
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <prvAddNewTaskToReadyList+0xcc>)
 8001978:	441a      	add	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f7ff fe7a 	bl	800167a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001986:	f000 fd65 	bl	8002454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <prvAddNewTaskToReadyList+0xc0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <prvAddNewTaskToReadyList+0xbc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <prvAddNewTaskToReadyList+0xd0>)
 80019a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f3bf 8f4f 	dsb	sy
 80019ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000294 	.word	0x20000294
 80019bc:	20000090 	.word	0x20000090
 80019c0:	200002a0 	.word	0x200002a0
 80019c4:	200002b0 	.word	0x200002b0
 80019c8:	2000029c 	.word	0x2000029c
 80019cc:	20000094 	.word	0x20000094
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <vTaskDelay+0x60>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <vTaskDelay+0x2e>
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	e7fe      	b.n	8001a00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001a02:	f000 f861 	bl	8001ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a06:	2100      	movs	r1, #0
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fba5 	bl	8002158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001a0e:	f000 f869 	bl	8001ae4 <xTaskResumeAll>
 8001a12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <vTaskDelay+0x64>)
 8001a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002bc 	.word	0x200002bc
 8001a38:	e000ed04 	.word	0xe000ed04

08001a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <vTaskStartScheduler+0x74>)
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2300      	movs	r3, #0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	4919      	ldr	r1, [pc, #100]	; (8001ab4 <vTaskStartScheduler+0x78>)
 8001a50:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <vTaskStartScheduler+0x7c>)
 8001a52:	f7ff fe96 	bl	8001782 <xTaskCreate>
 8001a56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d115      	bne.n	8001a8a <vTaskStartScheduler+0x4e>
 8001a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <vTaskStartScheduler+0x80>)
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <vTaskStartScheduler+0x84>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <vTaskStartScheduler+0x88>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001a84:	f000 fc48 	bl	8002318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001a88:	e00d      	b.n	8001aa6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d109      	bne.n	8001aa6 <vTaskStartScheduler+0x6a>
 8001a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e7fe      	b.n	8001aa4 <vTaskStartScheduler+0x68>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002b8 	.word	0x200002b8
 8001ab4:	08003fe4 	.word	0x08003fe4
 8001ab8:	08001f7d 	.word	0x08001f7d
 8001abc:	200002b4 	.word	0x200002b4
 8001ac0:	200002a0 	.word	0x200002a0
 8001ac4:	20000298 	.word	0x20000298

08001ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <vTaskSuspendAll+0x18>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <vTaskSuspendAll+0x18>)
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200002bc 	.word	0x200002bc

08001ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <xTaskResumeAll+0x2a>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	e7fe      	b.n	8001b0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b0e:	f000 fc73 	bl	80023f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001b1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d161      	bne.n	8001be8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <xTaskResumeAll+0x118>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05d      	beq.n	8001be8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b2c:	e02e      	b.n	8001b8c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <xTaskResumeAll+0x11c>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fdf8 	bl	8001730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3304      	adds	r3, #4
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fdf3 	bl	8001730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	409a      	lsls	r2, r3
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <xTaskResumeAll+0x120>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <xTaskResumeAll+0x120>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <xTaskResumeAll+0x124>)
 8001b6a:	441a      	add	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff fd81 	bl	800167a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <xTaskResumeAll+0x128>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d302      	bcc.n	8001b8c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <xTaskResumeAll+0x12c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <xTaskResumeAll+0x11c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1cc      	bne.n	8001b2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001b9a:	f000 fa83 	bl	80020a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <xTaskResumeAll+0x130>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d010      	beq.n	8001bcc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001baa:	f000 f837 	bl	8001c1c <xTaskIncrementTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <xTaskResumeAll+0x12c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f1      	bne.n	8001baa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <xTaskResumeAll+0x130>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <xTaskResumeAll+0x12c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <xTaskResumeAll+0x134>)
 8001bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f3bf 8f4f 	dsb	sy
 8001be4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001be8:	f000 fc34 	bl	8002454 <vPortExitCritical>

	return xAlreadyYielded;
 8001bec:	68bb      	ldr	r3, [r7, #8]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002bc 	.word	0x200002bc
 8001bfc:	20000294 	.word	0x20000294
 8001c00:	20000254 	.word	0x20000254
 8001c04:	2000029c 	.word	0x2000029c
 8001c08:	20000094 	.word	0x20000094
 8001c0c:	20000090 	.word	0x20000090
 8001c10:	200002a8 	.word	0x200002a8
 8001c14:	200002a4 	.word	0x200002a4
 8001c18:	e000ed04 	.word	0xe000ed04

08001c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <xTaskIncrementTick+0x14c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 808c 	bne.w	8001d48 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c30:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <xTaskIncrementTick+0x150>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <xTaskIncrementTick+0x150>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001c44:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <xTaskIncrementTick+0x46>
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	e7fe      	b.n	8001c60 <xTaskIncrementTick+0x44>
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <xTaskIncrementTick+0x158>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a40      	ldr	r2, [pc, #256]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <xTaskIncrementTick+0x158>)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <xTaskIncrementTick+0x15c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4a3e      	ldr	r2, [pc, #248]	; (8001d78 <xTaskIncrementTick+0x15c>)
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	f000 fa10 	bl	80020a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <xTaskIncrementTick+0x160>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d34d      	bcc.n	8001d2a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <xTaskIncrementTick+0x80>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <xTaskIncrementTick+0x82>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <xTaskIncrementTick+0x160>)
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	601a      	str	r2, [r3, #0]
					break;
 8001caa:	e03e      	b.n	8001d2a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d203      	bcs.n	8001ccc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <xTaskIncrementTick+0x160>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
						break;
 8001cca:	e02e      	b.n	8001d2a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fd2d 	bl	8001730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fd24 	bl	8001730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <xTaskIncrementTick+0x164>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <xTaskIncrementTick+0x164>)
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <xTaskIncrementTick+0x168>)
 8001d08:	441a      	add	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7ff fcb2 	bl	800167a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <xTaskIncrementTick+0x16c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3b4      	bcc.n	8001c8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d28:	e7b1      	b.n	8001c8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <xTaskIncrementTick+0x16c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d30:	4914      	ldr	r1, [pc, #80]	; (8001d84 <xTaskIncrementTick+0x168>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d907      	bls.n	8001d52 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e004      	b.n	8001d52 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <xTaskIncrementTick+0x170>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <xTaskIncrementTick+0x170>)
 8001d50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <xTaskIncrementTick+0x174>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001d5e:	697b      	ldr	r3, [r7, #20]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200002bc 	.word	0x200002bc
 8001d6c:	20000298 	.word	0x20000298
 8001d70:	2000024c 	.word	0x2000024c
 8001d74:	20000250 	.word	0x20000250
 8001d78:	200002ac 	.word	0x200002ac
 8001d7c:	200002b4 	.word	0x200002b4
 8001d80:	2000029c 	.word	0x2000029c
 8001d84:	20000094 	.word	0x20000094
 8001d88:	20000090 	.word	0x20000090
 8001d8c:	200002a4 	.word	0x200002a4
 8001d90:	200002a8 	.word	0x200002a8

08001d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <vTaskSwitchContext+0xa0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <vTaskSwitchContext+0xa4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001da8:	e03e      	b.n	8001e28 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <vTaskSwitchContext+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <vTaskSwitchContext+0xa8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f1c3 031f 	rsb	r3, r3, #31
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <vTaskSwitchContext+0xac>)
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <vTaskSwitchContext+0x5a>
	__asm volatile
 8001dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e7fe      	b.n	8001dec <vTaskSwitchContext+0x58>
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <vTaskSwitchContext+0xac>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d104      	bne.n	8001e1e <vTaskSwitchContext+0x8a>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <vTaskSwitchContext+0xb0>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200002bc 	.word	0x200002bc
 8001e38:	200002a8 	.word	0x200002a8
 8001e3c:	2000029c 	.word	0x2000029c
 8001e40:	20000094 	.word	0x20000094
 8001e44:	20000090 	.word	0x20000090

08001e48 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <vTaskPlaceOnUnorderedEventList+0x26>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e7fe      	b.n	8001e6c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <vTaskPlaceOnUnorderedEventList+0x42>
 8001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e7fe      	b.n	8001e88 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e94:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff fbeb 	bl	800167a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f956 	bl	8002158 <prvAddCurrentTaskToDelayedList>
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002bc 	.word	0x200002bc
 8001eb8:	20000090 	.word	0x20000090

08001ebc <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <vTaskRemoveFromUnorderedEventList+0xac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <vTaskRemoveFromUnorderedEventList+0x26>
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e7fe      	b.n	8001ee0 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <vTaskRemoveFromUnorderedEventList+0x50>
 8001ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e7fe      	b.n	8001f0a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fc0f 	bl	8001730 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3304      	adds	r3, #4
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fc0a 	bl	8001730 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	2201      	movs	r2, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8001f3c:	441a      	add	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3304      	adds	r3, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f7ff fb98 	bl	800167a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d902      	bls.n	8001f5e <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
	}
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002bc 	.word	0x200002bc
 8001f6c:	2000029c 	.word	0x2000029c
 8001f70:	20000094 	.word	0x20000094
 8001f74:	20000090 	.word	0x20000090
 8001f78:	200002a8 	.word	0x200002a8

08001f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f84:	f000 f852 	bl	800202c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <prvIdleTask+0x28>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d9f9      	bls.n	8001f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <prvIdleTask+0x2c>)
 8001f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f3bf 8f4f 	dsb	sy
 8001f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fa0:	e7f0      	b.n	8001f84 <prvIdleTask+0x8>
 8001fa2:	bf00      	nop
 8001fa4:	20000094 	.word	0x20000094
 8001fa8:	e000ed04 	.word	0xe000ed04

08001fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	e00c      	b.n	8001fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <prvInitialiseTaskLists+0x60>)
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fb2c 	bl	8001624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b13      	cmp	r3, #19
 8001fd6:	d9ef      	bls.n	8001fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <prvInitialiseTaskLists+0x64>)
 8001fda:	f7ff fb23 	bl	8001624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001fde:	480d      	ldr	r0, [pc, #52]	; (8002014 <prvInitialiseTaskLists+0x68>)
 8001fe0:	f7ff fb20 	bl	8001624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <prvInitialiseTaskLists+0x6c>)
 8001fe6:	f7ff fb1d 	bl	8001624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <prvInitialiseTaskLists+0x70>)
 8001fec:	f7ff fb1a 	bl	8001624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <prvInitialiseTaskLists+0x74>)
 8001ff2:	f7ff fb17 	bl	8001624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <prvInitialiseTaskLists+0x78>)
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <prvInitialiseTaskLists+0x64>)
 8001ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <prvInitialiseTaskLists+0x7c>)
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <prvInitialiseTaskLists+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000094 	.word	0x20000094
 8002010:	20000224 	.word	0x20000224
 8002014:	20000238 	.word	0x20000238
 8002018:	20000254 	.word	0x20000254
 800201c:	20000268 	.word	0x20000268
 8002020:	20000280 	.word	0x20000280
 8002024:	2000024c 	.word	0x2000024c
 8002028:	20000250 	.word	0x20000250

0800202c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002032:	e019      	b.n	8002068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002034:	f000 f9e0 	bl	80023f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <prvCheckTasksWaitingTermination+0x4c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fb73 	bl	8001730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <prvCheckTasksWaitingTermination+0x50>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3b01      	subs	r3, #1
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <prvCheckTasksWaitingTermination+0x50>)
 8002052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <prvCheckTasksWaitingTermination+0x54>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <prvCheckTasksWaitingTermination+0x54>)
 800205c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800205e:	f000 f9f9 	bl	8002454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f80e 	bl	8002084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <prvCheckTasksWaitingTermination+0x54>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e1      	bne.n	8002034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000268 	.word	0x20000268
 800207c:	20000294 	.word	0x20000294
 8002080:	2000027c 	.word	0x2000027c

08002084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fb2d 	bl	80026f0 <vPortFree>
			vPortFree( pxTCB );
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fb2a 	bl	80026f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <prvResetNextTaskUnblockTime+0x40>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <prvResetNextTaskUnblockTime+0x14>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <prvResetNextTaskUnblockTime+0x16>
 80020b8:	2300      	movs	r3, #0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <prvResetNextTaskUnblockTime+0x44>)
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020c6:	e008      	b.n	80020da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <prvResetNextTaskUnblockTime+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <prvResetNextTaskUnblockTime+0x44>)
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	2000024c 	.word	0x2000024c
 80020e8:	200002b4 	.word	0x200002b4

080020ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <xTaskGetSchedulerState+0x34>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80020fa:	2301      	movs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e008      	b.n	8002112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <xTaskGetSchedulerState+0x38>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002108:	2302      	movs	r3, #2
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	e001      	b.n	8002112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002112:	687b      	ldr	r3, [r7, #4]
	}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200002a0 	.word	0x200002a0
 8002124:	200002bc 	.word	0x200002bc

08002128 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <uxTaskResetEventItemValue+0x2c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <uxTaskResetEventItemValue+0x2c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <uxTaskResetEventItemValue+0x2c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1c2 0214 	rsb	r2, r2, #20
 8002144:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000090 	.word	0x20000090

08002158 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <prvAddCurrentTaskToDelayedList+0xb4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3304      	adds	r3, #4
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fade 	bl	8001730 <uxListRemove>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10b      	bne.n	8002192 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <prvAddCurrentTaskToDelayedList+0xb4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	2201      	movs	r2, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <prvAddCurrentTaskToDelayedList+0xb8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4013      	ands	r3, r2
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002190:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d10a      	bne.n	80021b0 <prvAddCurrentTaskToDelayedList+0x58>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <prvAddCurrentTaskToDelayedList+0xb4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3304      	adds	r3, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	481a      	ldr	r0, [pc, #104]	; (8002214 <prvAddCurrentTaskToDelayedList+0xbc>)
 80021aa:	f7ff fa66 	bl	800167a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021ae:	e026      	b.n	80021fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d209      	bcs.n	80021dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <prvAddCurrentTaskToDelayedList+0xc0>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7ff fa73 	bl	80016c0 <vListInsert>
}
 80021da:	e010      	b.n	80021fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <prvAddCurrentTaskToDelayedList+0xc4>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <prvAddCurrentTaskToDelayedList+0xb4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3304      	adds	r3, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7ff fa69 	bl	80016c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d202      	bcs.n	80021fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6013      	str	r3, [r2, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000298 	.word	0x20000298
 800220c:	20000090 	.word	0x20000090
 8002210:	2000029c 	.word	0x2000029c
 8002214:	20000280 	.word	0x20000280
 8002218:	20000250 	.word	0x20000250
 800221c:	2000024c 	.word	0x2000024c
 8002220:	200002b4 	.word	0x200002b4

08002224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3b04      	subs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800223c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3b04      	subs	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f023 0201 	bic.w	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b04      	subs	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <pxPortInitialiseStack+0x54>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b14      	subs	r3, #20
 800225e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b20      	subs	r3, #32
 800226a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800226c:	68fb      	ldr	r3, [r7, #12]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	0800227d 	.word	0x0800227d

0800227c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <prvTaskExitError+0x4c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d009      	beq.n	80022a4 <prvTaskExitError+0x28>
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e7fe      	b.n	80022a2 <prvTaskExitError+0x26>
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80022b6:	bf00      	nop
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0fc      	beq.n	80022b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000008 	.word	0x20000008
 80022cc:	00000000 	.word	0x00000000

080022d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <pxCurrentTCBConst2>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6808      	ldr	r0, [r1, #0]
 80022d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022da:	f380 8809 	msr	PSP, r0
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f380 8811 	msr	BASEPRI, r0
 80022ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80022ee:	4770      	bx	lr

080022f0 <pxCurrentTCBConst2>:
 80022f0:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop

080022f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80022f8:	4806      	ldr	r0, [pc, #24]	; (8002314 <prvPortStartFirstTask+0x1c>)
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	6800      	ldr	r0, [r0, #0]
 80022fe:	f380 8808 	msr	MSP, r0
 8002302:	b662      	cpsie	i
 8002304:	b661      	cpsie	f
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	df00      	svc	0
 8002310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002312:	bf00      	nop
 8002314:	e000ed08 	.word	0xe000ed08

08002318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <xPortStartScheduler+0xcc>)
 8002320:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <xPortStartScheduler+0xd0>)
 8002344:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <xPortStartScheduler+0xd4>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800234c:	e009      	b.n	8002362 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800234e:	4b27      	ldr	r3, [pc, #156]	; (80023ec <xPortStartScheduler+0xd4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3b01      	subs	r3, #1
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <xPortStartScheduler+0xd4>)
 8002356:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d0ef      	beq.n	800234e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <xPortStartScheduler+0xd4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	d009      	beq.n	800238e <xPortStartScheduler+0x76>
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	e7fe      	b.n	800238c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <xPortStartScheduler+0xd4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <xPortStartScheduler+0xd4>)
 8002396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <xPortStartScheduler+0xd4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023a0:	4a12      	ldr	r2, [pc, #72]	; (80023ec <xPortStartScheduler+0xd4>)
 80023a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <xPortStartScheduler+0xd8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <xPortStartScheduler+0xd8>)
 80023b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <xPortStartScheduler+0xd8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <xPortStartScheduler+0xd8>)
 80023be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80023c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80023c4:	f000 f8b0 	bl	8002528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <xPortStartScheduler+0xdc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80023ce:	f7ff ff93 	bl	80022f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80023d2:	f7ff fcdf 	bl	8001d94 <vTaskSwitchContext>
	prvTaskExitError();
 80023d6:	f7ff ff51 	bl	800227c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000e400 	.word	0xe000e400
 80023e8:	200002c0 	.word	0x200002c0
 80023ec:	200002c4 	.word	0x200002c4
 80023f0:	e000ed20 	.word	0xe000ed20
 80023f4:	20000008 	.word	0x20000008

080023f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002402:	f383 8811 	msr	BASEPRI, r3
 8002406:	f3bf 8f6f 	isb	sy
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <vPortEnterCritical+0x54>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <vPortEnterCritical+0x54>)
 8002418:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <vPortEnterCritical+0x54>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10e      	bne.n	8002440 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <vPortEnterCritical+0x58>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <vPortEnterCritical+0x48>
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	e7fe      	b.n	800243e <vPortEnterCritical+0x46>
	}
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008
 8002450:	e000ed04 	.word	0xe000ed04

08002454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <vPortExitCritical+0x48>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <vPortExitCritical+0x22>
 8002462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	e7fe      	b.n	8002474 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <vPortExitCritical+0x48>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	4a07      	ldr	r2, [pc, #28]	; (800249c <vPortExitCritical+0x48>)
 800247e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <vPortExitCritical+0x48>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <vPortExitCritical+0x3e>
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000008 	.word	0x20000008

080024a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80024a0:	f3ef 8009 	mrs	r0, PSP
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <pxCurrentTCBConst>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024b0:	6010      	str	r0, [r2, #0]
 80024b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80024b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024ba:	f380 8811 	msr	BASEPRI, r0
 80024be:	f7ff fc69 	bl	8001d94 <vTaskSwitchContext>
 80024c2:	f04f 0000 	mov.w	r0, #0
 80024c6:	f380 8811 	msr	BASEPRI, r0
 80024ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	6808      	ldr	r0, [r1, #0]
 80024d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024d6:	f380 8809 	msr	PSP, r0
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	4770      	bx	lr

080024e0 <pxCurrentTCBConst>:
 80024e0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop

080024e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002500:	f7ff fb8c 	bl	8001c1c <xTaskIncrementTick>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <xPortSysTickHandler+0x3c>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <vPortSetupTimerInterrupt+0x30>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <vPortSetupTimerInterrupt+0x34>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <vPortSetupTimerInterrupt+0x38>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a09      	ldr	r2, [pc, #36]	; (8002564 <vPortSetupTimerInterrupt+0x3c>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	4a08      	ldr	r2, [pc, #32]	; (8002568 <vPortSetupTimerInterrupt+0x40>)
 8002546:	3b01      	subs	r3, #1
 8002548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800254a:	4b03      	ldr	r3, [pc, #12]	; (8002558 <vPortSetupTimerInterrupt+0x30>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	e000e010 	.word	0xe000e010
 800255c:	e000e018 	.word	0xe000e018
 8002560:	2000000c 	.word	0x2000000c
 8002564:	10624dd3 	.word	0x10624dd3
 8002568:	e000e014 	.word	0xe000e014

0800256c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002578:	f7ff faa6 	bl	8001ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800257c:	4b57      	ldr	r3, [pc, #348]	; (80026dc <pvPortMalloc+0x170>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002584:	f000 f90c 	bl	80027a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002588:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <pvPortMalloc+0x174>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 808c 	bne.w	80026ae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01c      	beq.n	80025d6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800259c:	2208      	movs	r2, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f023 0307 	bic.w	r3, r3, #7
 80025b4:	3308      	adds	r3, #8
 80025b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <pvPortMalloc+0x6a>
	__asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e7fe      	b.n	80025d4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d068      	beq.n	80026ae <pvPortMalloc+0x142>
 80025dc:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <pvPortMalloc+0x178>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d863      	bhi.n	80026ae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80025e6:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <pvPortMalloc+0x17c>)
 80025e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <pvPortMalloc+0x17c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025f0:	e004      	b.n	80025fc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d903      	bls.n	800260e <pvPortMalloc+0xa2>
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f1      	bne.n	80025f2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <pvPortMalloc+0x170>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	429a      	cmp	r2, r3
 8002616:	d04a      	beq.n	80026ae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	4413      	add	r3, r2
 8002620:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	1ad2      	subs	r2, r2, r3
 8002632:	2308      	movs	r3, #8
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	429a      	cmp	r2, r3
 8002638:	d91e      	bls.n	8002678 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <pvPortMalloc+0xf4>
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e7fe      	b.n	800265e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f000 f8f6 	bl	8002864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <pvPortMalloc+0x178>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <pvPortMalloc+0x178>)
 8002684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <pvPortMalloc+0x178>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <pvPortMalloc+0x180>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d203      	bcs.n	800269a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <pvPortMalloc+0x178>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <pvPortMalloc+0x180>)
 8002698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <pvPortMalloc+0x174>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80026ae:	f7ff fa19 	bl	8001ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <pvPortMalloc+0x164>
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e7fe      	b.n	80026ce <pvPortMalloc+0x162>
	return pvReturn;
 80026d0:	69fb      	ldr	r3, [r7, #28]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000ed0 	.word	0x20000ed0
 80026e0:	20000edc 	.word	0x20000edc
 80026e4:	20000ed4 	.word	0x20000ed4
 80026e8:	20000ec8 	.word	0x20000ec8
 80026ec:	20000ed8 	.word	0x20000ed8

080026f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d046      	beq.n	8002790 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002702:	2308      	movs	r3, #8
 8002704:	425b      	negs	r3, r3
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4413      	add	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <vPortFree+0xa8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <vPortFree+0x42>
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e7fe      	b.n	8002730 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <vPortFree+0x5e>
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	e7fe      	b.n	800274c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <vPortFree+0xa8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d019      	beq.n	8002790 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d115      	bne.n	8002790 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <vPortFree+0xa8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	43db      	mvns	r3, r3
 800276e:	401a      	ands	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002774:	f7ff f9a8 	bl	8001ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <vPortFree+0xac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4413      	add	r3, r2
 8002782:	4a06      	ldr	r2, [pc, #24]	; (800279c <vPortFree+0xac>)
 8002784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002786:	6938      	ldr	r0, [r7, #16]
 8002788:	f000 f86c 	bl	8002864 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800278c:	f7ff f9aa 	bl	8001ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000edc 	.word	0x20000edc
 800279c:	20000ed4 	.word	0x20000ed4

080027a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <prvHeapInit+0xac>)
 80027ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3307      	adds	r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0307 	bic.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <prvHeapInit+0xac>)
 80027d0:	4413      	add	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <prvHeapInit+0xb0>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <prvHeapInit+0xb0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80027ec:	2208      	movs	r2, #8
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a15      	ldr	r2, [pc, #84]	; (8002854 <prvHeapInit+0xb4>)
 8002800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <prvHeapInit+0xb4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <prvHeapInit+0xb4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <prvHeapInit+0xb4>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <prvHeapInit+0xb8>)
 800282e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a09      	ldr	r2, [pc, #36]	; (800285c <prvHeapInit+0xbc>)
 8002836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <prvHeapInit+0xc0>)
 800283a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200002c8 	.word	0x200002c8
 8002850:	20000ec8 	.word	0x20000ec8
 8002854:	20000ed0 	.word	0x20000ed0
 8002858:	20000ed8 	.word	0x20000ed8
 800285c:	20000ed4 	.word	0x20000ed4
 8002860:	20000edc 	.word	0x20000edc

08002864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <prvInsertBlockIntoFreeList+0xa8>)
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <prvInsertBlockIntoFreeList+0x14>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	429a      	cmp	r2, r3
 8002880:	d8f7      	bhi.n	8002872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d108      	bne.n	80028a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	441a      	add	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	441a      	add	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d118      	bne.n	80028ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <prvInsertBlockIntoFreeList+0xac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d00d      	beq.n	80028e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	441a      	add	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e008      	b.n	80028f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <prvInsertBlockIntoFreeList+0xac>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e003      	b.n	80028f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d002      	beq.n	8002902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	20000ec8 	.word	0x20000ec8
 8002910:	20000ed0 	.word	0x20000ed0

08002914 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d106      	bne.n	8002930 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	2201      	movs	r2, #1
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <__io_putchar+0x34>)
 800292a:	4808      	ldr	r0, [pc, #32]	; (800294c <__io_putchar+0x38>)
 800292c:	f7fe fb7d 	bl	800102a <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002930:	1d39      	adds	r1, r7, #4
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	2201      	movs	r2, #1
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <__io_putchar+0x38>)
 800293a:	f7fe fb76 	bl	800102a <HAL_UART_Transmit>
 return ch;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	08003fec 	.word	0x08003fec
 800294c:	20000ef4 	.word	0x20000ef4

08002950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002954:	f7fd fbfc 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002958:	f000 f818 	bl	800298c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800295c:	f000 f882 	bl	8002a64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002960:	f000 f856 	bl	8002a10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* display a freeRTOS Intro */
  freertos_IntroTitle();
 8002964:	f000 f8f6 	bl	8002b54 <freertos_IntroTitle>

  // 즉시 pintf 가 송신될수 있도록 stdout buffer size를 0으로 만들어준다.
  //setvbuf(stdout, NULL, _IONBF, 0);
  printf("[TASK]main\n");
 8002968:	4806      	ldr	r0, [pc, #24]	; (8002984 <main+0x34>)
 800296a:	f000 fe31 	bl	80035d0 <puts>
  fflush(stdout);
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <main+0x38>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fbf5 	bl	8003164 <fflush>
  /* definition and creation of defaultTask */
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  USER_THREADS();
 800297a:	f000 faa5 	bl	8002ec8 <USER_THREADS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800297e:	f7fe fcbf 	bl	8001300 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002982:	e7fe      	b.n	8002982 <main+0x32>
 8002984:	08003ff0 	.word	0x08003ff0
 8002988:	20000010 	.word	0x20000010

0800298c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b090      	sub	sp, #64	; 0x40
 8002990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002992:	f107 0318 	add.w	r3, r7, #24
 8002996:	2228      	movs	r2, #40	; 0x28
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fce2 	bl	8003364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b2:	2301      	movs	r3, #1
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b6:	2310      	movs	r3, #16
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ba:	2302      	movs	r3, #2
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80029c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fec3 	bl	8000758 <HAL_RCC_OscConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80029d8:	f000 f932 	bl	8002c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029dc:	230f      	movs	r3, #15
 80029de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e0:	2302      	movs	r3, #2
 80029e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe f92e 	bl	8000c58 <HAL_RCC_ClockConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002a02:	f000 f91d 	bl	8002c40 <Error_Handler>
  }
}
 8002a06:	bf00      	nop
 8002a08:	3740      	adds	r7, #64	; 0x40
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <MX_USART2_UART_Init+0x50>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a48:	f7fe faa2 	bl	8000f90 <HAL_UART_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a52:	f000 f8f5 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000ef4 	.word	0x20000ef4
 8002a60:	40004400 	.word	0x40004400

08002a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002a96:	f043 0320 	orr.w	r3, r3, #32
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <MX_GPIO_Init+0xcc>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2120      	movs	r1, #32
 8002adc:	4815      	ldr	r0, [pc, #84]	; (8002b34 <MX_GPIO_Init+0xd0>)
 8002ade:	f7fd fe01 	bl	80006e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_GPIO_Init+0xd4>)
 8002aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	4619      	mov	r1, r3
 8002af6:	4811      	ldr	r0, [pc, #68]	; (8002b3c <MX_GPIO_Init+0xd8>)
 8002af8:	f7fd fc9a 	bl	8000430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002afc:	2320      	movs	r3, #32
 8002afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	4808      	ldr	r0, [pc, #32]	; (8002b34 <MX_GPIO_Init+0xd0>)
 8002b14:	f7fd fc8c 	bl	8000430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2105      	movs	r1, #5
 8002b1c:	2028      	movs	r0, #40	; 0x28
 8002b1e:	f7fd fc50 	bl	80003c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b22:	2028      	movs	r0, #40	; 0x28
 8002b24:	f7fd fc69 	bl	80003fa <HAL_NVIC_EnableIRQ>

}
 8002b28:	bf00      	nop
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010800 	.word	0x40010800
 8002b38:	10110000 	.word	0x10110000
 8002b3c:	40011000 	.word	0x40011000

08002b40 <OSVersion>:

/* USER CODE BEGIN 4 */
// version of this freertos
char* OSVersion(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
	return VERSION_RTOS;
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <OSVersion+0x10>)
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	08003ffc 	.word	0x08003ffc

08002b54 <freertos_IntroTitle>:

//
// 'freertos_IntroTitle'
//
void freertos_IntroTitle(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002b58:	4823      	ldr	r0, [pc, #140]	; (8002be8 <freertos_IntroTitle+0x94>)
 8002b5a:	f000 fd39 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8002b5e:	4823      	ldr	r0, [pc, #140]	; (8002bec <freertos_IntroTitle+0x98>)
 8002b60:	f000 fd36 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8002b64:	4822      	ldr	r0, [pc, #136]	; (8002bf0 <freertos_IntroTitle+0x9c>)
 8002b66:	f000 fd33 	bl	80035d0 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8002b6a:	4822      	ldr	r0, [pc, #136]	; (8002bf4 <freertos_IntroTitle+0xa0>)
 8002b6c:	f000 fd30 	bl	80035d0 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8002b70:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <freertos_IntroTitle+0xa4>)
 8002b72:	f000 fd2d 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8002b76:	4821      	ldr	r0, [pc, #132]	; (8002bfc <freertos_IntroTitle+0xa8>)
 8002b78:	f000 fd2a 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8002b7c:	4820      	ldr	r0, [pc, #128]	; (8002c00 <freertos_IntroTitle+0xac>)
 8002b7e:	f000 fd27 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8002b82:	4820      	ldr	r0, [pc, #128]	; (8002c04 <freertos_IntroTitle+0xb0>)
 8002b84:	f000 fd24 	bl	80035d0 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8002b88:	481f      	ldr	r0, [pc, #124]	; (8002c08 <freertos_IntroTitle+0xb4>)
 8002b8a:	f000 fd21 	bl	80035d0 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8002b8e:	481f      	ldr	r0, [pc, #124]	; (8002c0c <freertos_IntroTitle+0xb8>)
 8002b90:	f000 fd1e 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8002b94:	481e      	ldr	r0, [pc, #120]	; (8002c10 <freertos_IntroTitle+0xbc>)
 8002b96:	f000 fd1b 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8002b9a:	481e      	ldr	r0, [pc, #120]	; (8002c14 <freertos_IntroTitle+0xc0>)
 8002b9c:	f000 fd18 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8002ba0:	481d      	ldr	r0, [pc, #116]	; (8002c18 <freertos_IntroTitle+0xc4>)
 8002ba2:	f000 fd15 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8002ba6:	481d      	ldr	r0, [pc, #116]	; (8002c1c <freertos_IntroTitle+0xc8>)
 8002ba8:	f000 fd12 	bl	80035d0 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8002bac:	481c      	ldr	r0, [pc, #112]	; (8002c20 <freertos_IntroTitle+0xcc>)
 8002bae:	f000 fd0f 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8002bb2:	481c      	ldr	r0, [pc, #112]	; (8002c24 <freertos_IntroTitle+0xd0>)
 8002bb4:	f000 fd0c 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8002bb8:	481b      	ldr	r0, [pc, #108]	; (8002c28 <freertos_IntroTitle+0xd4>)
 8002bba:	f000 fd09 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8002bbe:	481b      	ldr	r0, [pc, #108]	; (8002c2c <freertos_IntroTitle+0xd8>)
 8002bc0:	f000 fd06 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002bc4:	481a      	ldr	r0, [pc, #104]	; (8002c30 <freertos_IntroTitle+0xdc>)
 8002bc6:	f000 fd03 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8002bca:	f7ff ffb9 	bl	8002b40 <OSVersion>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4818      	ldr	r0, [pc, #96]	; (8002c34 <freertos_IntroTitle+0xe0>)
 8002bd4:	f000 fc74 	bl	80034c0 <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002bd8:	4817      	ldr	r0, [pc, #92]	; (8002c38 <freertos_IntroTitle+0xe4>)
 8002bda:	f000 fcf9 	bl	80035d0 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 8002bde:	4817      	ldr	r0, [pc, #92]	; (8002c3c <freertos_IntroTitle+0xe8>)
 8002be0:	f000 fcf6 	bl	80035d0 <puts>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08004004 	.word	0x08004004
 8002bec:	08004044 	.word	0x08004044
 8002bf0:	08004098 	.word	0x08004098
 8002bf4:	080040ec 	.word	0x080040ec
 8002bf8:	08004140 	.word	0x08004140
 8002bfc:	08004194 	.word	0x08004194
 8002c00:	080041e8 	.word	0x080041e8
 8002c04:	0800423c 	.word	0x0800423c
 8002c08:	08004290 	.word	0x08004290
 8002c0c:	080042e4 	.word	0x080042e4
 8002c10:	08004338 	.word	0x08004338
 8002c14:	0800438c 	.word	0x0800438c
 8002c18:	080043e0 	.word	0x080043e0
 8002c1c:	08004434 	.word	0x08004434
 8002c20:	08004488 	.word	0x08004488
 8002c24:	080044dc 	.word	0x080044dc
 8002c28:	08004530 	.word	0x08004530
 8002c2c:	08004584 	.word	0x08004584
 8002c30:	080045cc 	.word	0x080045cc
 8002c34:	080045f8 	.word	0x080045f8
 8002c38:	0800463c 	.word	0x0800463c
 8002c3c:	08004668 	.word	0x08004668

08002c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_MspInit+0x68>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_MspInit+0x68>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6193      	str	r3, [r2, #24]
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_MspInit+0x68>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_MspInit+0x68>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <HAL_MspInit+0x68>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_MspInit+0x68>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	210f      	movs	r1, #15
 8002c86:	f06f 0001 	mvn.w	r0, #1
 8002c8a:	f7fd fb9a 	bl	80003c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_MspInit+0x6c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_MspInit+0x6c>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40010000 	.word	0x40010000

08002cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_UART_MspInit+0x70>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d123      	bne.n	8002d24 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_UART_MspInit+0x74>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <HAL_UART_MspInit+0x74>)
 8002ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce6:	61d3      	str	r3, [r2, #28]
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_UART_MspInit+0x74>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_UART_MspInit+0x74>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_UART_MspInit+0x74>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	6193      	str	r3, [r2, #24]
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_UART_MspInit+0x74>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_UART_MspInit+0x78>)
 8002d20:	f7fd fb86 	bl	8000430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010800 	.word	0x40010800

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <HardFault_Handler+0x4>

08002d4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <MemManage_Handler+0x4>

08002d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <BusFault_Handler+0x4>

08002d56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <UsageFault_Handler+0x4>

08002d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d6c:	f7fd fa36 	bl	80001dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d70:	f7ff f9bc 	bl	80020ec <xTaskGetSchedulerState>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d7a:	f7ff fbb5 	bl	80024e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d8a:	f7fd fcc3 	bl	8000714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e00a      	b.n	8002dba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002da4:	f3af 8000 	nop.w
 8002da8:	4601      	mov	r1, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	60ba      	str	r2, [r7, #8]
 8002db0:	b2ca      	uxtb	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3301      	adds	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	dbf0      	blt.n	8002da4 <_read+0x12>
	}

return len;
 8002dc2:	687b      	ldr	r3, [r7, #4]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e009      	b.n	8002df2 <_write+0x26>
#ifdef _SWV_ITM_PRINTF
 if ( *ptr == '\n' )
	 ITM_SendChar('\r');
 ITM_SendChar(*ptr++);
#else
	__io_putchar(*ptr++);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	60ba      	str	r2, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fd94 	bl	8002914 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3301      	adds	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	dbf1      	blt.n	8002dde <_write+0x12>
#endif
	}
	return len;
 8002dfa:	687b      	ldr	r3, [r7, #4]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_close>:

int _close(int file)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	return -1;
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <_isatty>:

int _isatty(int file)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
	return 0;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_sbrk+0x50>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <_sbrk+0x16>
		heap_end = &end;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <_sbrk+0x50>)
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <_sbrk+0x54>)
 8002e78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <_sbrk+0x50>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <_sbrk+0x50>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	466a      	mov	r2, sp
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d907      	bls.n	8002e9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e8e:	f000 f8b3 	bl	8002ff8 <__errno>
 8002e92:	4602      	mov	r2, r0
 8002e94:	230c      	movs	r3, #12
 8002e96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	e006      	b.n	8002eac <_sbrk+0x48>
	}

	heap_end += incr;
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <_sbrk+0x50>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <_sbrk+0x50>)
 8002ea8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000ee0 	.word	0x20000ee0
 8002eb8:	20000f60 	.word	0x20000f60

08002ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <USER_THREADS>:


/*-----------------------------------------------------------*/

void USER_THREADS( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af02      	add	r7, sp, #8
#ifdef CMSIS_OS
	osThreadDef(defaultTask, TaskMain, osPriorityNormal, 0, 128);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#else
	/* Create one of the two tasks. */
	xTaskCreate(	(TaskFunction_t)TaskMain,		/* Pointer to the function that implements the task. */
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <USER_THREADS+0x20>)
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2314      	movs	r3, #20
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	4904      	ldr	r1, [pc, #16]	; (8002eec <USER_THREADS+0x24>)
 8002edc:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <USER_THREADS+0x28>)
 8002ede:	f7fe fc50 	bl	8001782 <xTaskCreate>
					128,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					TASK_MAIN_PRIO,	/* This task will run at this priority */
					&xHandleMain );		/* We are not using the task handle. */
#endif
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000f54 	.word	0x20000f54
 8002eec:	080046c8 	.word	0x080046c8
 8002ef0:	08002ef5 	.word	0x08002ef5

08002ef4 <TaskMain>:
/*-----------------------------------------------------------*/

void TaskMain( void *pvParameters )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "TaskMain";
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <TaskMain+0x64>)
 8002efe:	60fb      	str	r3, [r7, #12]

	/* TODO #1:
		create a event flag
	    use group_id */
#if 1
group_id = xEventGroupCreate();
 8002f00:	f7fe fa05 	bl	800130e <xEventGroupCreate>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <TaskMain+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
if (group_id == NULL) printf("xEventGroupCreate error found\n");
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <TaskMain+0x68>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <TaskMain+0x24>
 8002f12:	4813      	ldr	r0, [pc, #76]	; (8002f60 <TaskMain+0x6c>)
 8002f14:	f000 fb5c 	bl	80035d0 <puts>
#endif // TODO #1

	/* Create the other task in exactly the same way. */
	xTaskCreate(	(TaskFunction_t)Task1,		/* Pointer to the function that implements the task. */
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <TaskMain+0x70>)
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	4910      	ldr	r1, [pc, #64]	; (8002f68 <TaskMain+0x74>)
 8002f26:	4811      	ldr	r0, [pc, #68]	; (8002f6c <TaskMain+0x78>)
 8002f28:	f7fe fc2b 	bl	8001782 <xTaskCreate>

	for(;;) {
	/* TODO #2:
		get flag 'ENGINE_OIL_PRES_OK' OR 'ENGINE_OIL_TEMP_OK' from TASK2 */
#if 1
uxBits = xEventGroupWaitBits( group_id, \
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <TaskMain+0x68>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2300      	movs	r3, #0
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	f7fe f9fe 	bl	800133c <xEventGroupWaitBits>
 8002f40:	60b8      	str	r0, [r7, #8]
				pdFALSE, \
				portMAX_DELAY );
UNUSED(uxBits);
#endif // TODO #2

		printf("."); fflush(stdout);
 8002f42:	202e      	movs	r0, #46	; 0x2e
 8002f44:	f000 fad4 	bl	80034f0 <putchar>
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <TaskMain+0x7c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f908 	bl	8003164 <fflush>
uxBits = xEventGroupWaitBits( group_id, \
 8002f54:	e7ea      	b.n	8002f2c <TaskMain+0x38>
 8002f56:	bf00      	nop
 8002f58:	080046c8 	.word	0x080046c8
 8002f5c:	20000f50 	.word	0x20000f50
 8002f60:	080046d4 	.word	0x080046d4
 8002f64:	20000f4c 	.word	0x20000f4c
 8002f68:	080046f4 	.word	0x080046f4
 8002f6c:	08002f75 	.word	0x08002f75
 8002f70:	20000010 	.word	0x20000010

08002f74 <Task1>:
	vTaskDelete (xHandleMain);	// vTaskDelete (NULL);
}
/*-----------------------------------------------------------*/

void Task1( void *pvParameters )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task1";
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <Task1+0x2c>)
 8002f7e:	60fb      	str	r3, [r7, #12]
	EventBits_t uxBits;

	/* Print out the name of this task. */
	printf( "%s is running\n", pcTaskName );
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4808      	ldr	r0, [pc, #32]	; (8002fa4 <Task1+0x30>)
 8002f84:	f000 fa9c 	bl	80034c0 <iprintf>

	for(;;) {
	/* TODO #2:
		post flag 'ENGINE_OIL_PRES_OK' to TASKMain */
#if 1
uxBits = xEventGroupSetBits(group_id, \
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <Task1+0x34>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fa9e 	bl	80014d0 <xEventGroupSetBits>
 8002f94:	60b8      	str	r0, [r7, #8]
								ENGINE_OIL_PRES_OK);
UNUSED(uxBits);
#endif // TODO #2
	vTaskDelay (pdMS_TO_TICKS (1000));
 8002f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f9a:	f7fe fd1b 	bl	80019d4 <vTaskDelay>
uxBits = xEventGroupSetBits(group_id, \
 8002f9e:	e7f3      	b.n	8002f88 <Task1+0x14>
 8002fa0:	080046f4 	.word	0x080046f4
 8002fa4:	080046fc 	.word	0x080046fc
 8002fa8:	20000f50 	.word	0x20000f50

08002fac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fae:	e003      	b.n	8002fb8 <LoopCopyDataInit>

08002fb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002fb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fb6:	3104      	adds	r1, #4

08002fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fb8:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fc0:	d3f6      	bcc.n	8002fb0 <CopyDataInit>
  ldr r2, =_sbss
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fc4:	e002      	b.n	8002fcc <LoopFillZerobss>

08002fc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fc8:	f842 3b04 	str.w	r3, [r2], #4

08002fcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fd0:	d3f9      	bcc.n	8002fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fd2:	f7ff ff73 	bl	8002ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fd6:	f000 f9a1 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fda:	f7ff fcb9 	bl	8002950 <main>
  bx lr
 8002fde:	4770      	bx	lr
  ldr r3, =_sidata
 8002fe0:	080047c4 	.word	0x080047c4
  ldr r0, =_sdata
 8002fe4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fe8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002fec:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002ff0:	20000f5c 	.word	0x20000f5c

08002ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ff4:	e7fe      	b.n	8002ff4 <ADC1_2_IRQHandler>
	...

08002ff8 <__errno>:
 8002ff8:	4b01      	ldr	r3, [pc, #4]	; (8003000 <__errno+0x8>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000010 	.word	0x20000010

08003004 <__sflush_r>:
 8003004:	898a      	ldrh	r2, [r1, #12]
 8003006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800300a:	4605      	mov	r5, r0
 800300c:	0710      	lsls	r0, r2, #28
 800300e:	460c      	mov	r4, r1
 8003010:	d458      	bmi.n	80030c4 <__sflush_r+0xc0>
 8003012:	684b      	ldr	r3, [r1, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	dc05      	bgt.n	8003024 <__sflush_r+0x20>
 8003018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	dc02      	bgt.n	8003024 <__sflush_r+0x20>
 800301e:	2000      	movs	r0, #0
 8003020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003026:	2e00      	cmp	r6, #0
 8003028:	d0f9      	beq.n	800301e <__sflush_r+0x1a>
 800302a:	2300      	movs	r3, #0
 800302c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003030:	682f      	ldr	r7, [r5, #0]
 8003032:	6a21      	ldr	r1, [r4, #32]
 8003034:	602b      	str	r3, [r5, #0]
 8003036:	d032      	beq.n	800309e <__sflush_r+0x9a>
 8003038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	075a      	lsls	r2, r3, #29
 800303e:	d505      	bpl.n	800304c <__sflush_r+0x48>
 8003040:	6863      	ldr	r3, [r4, #4]
 8003042:	1ac0      	subs	r0, r0, r3
 8003044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003046:	b10b      	cbz	r3, 800304c <__sflush_r+0x48>
 8003048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800304a:	1ac0      	subs	r0, r0, r3
 800304c:	2300      	movs	r3, #0
 800304e:	4602      	mov	r2, r0
 8003050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003052:	6a21      	ldr	r1, [r4, #32]
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	d106      	bne.n	800306c <__sflush_r+0x68>
 800305e:	6829      	ldr	r1, [r5, #0]
 8003060:	291d      	cmp	r1, #29
 8003062:	d848      	bhi.n	80030f6 <__sflush_r+0xf2>
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <__sflush_r+0x108>)
 8003066:	40ca      	lsrs	r2, r1
 8003068:	07d6      	lsls	r6, r2, #31
 800306a:	d544      	bpl.n	80030f6 <__sflush_r+0xf2>
 800306c:	2200      	movs	r2, #0
 800306e:	6062      	str	r2, [r4, #4]
 8003070:	6922      	ldr	r2, [r4, #16]
 8003072:	04d9      	lsls	r1, r3, #19
 8003074:	6022      	str	r2, [r4, #0]
 8003076:	d504      	bpl.n	8003082 <__sflush_r+0x7e>
 8003078:	1c42      	adds	r2, r0, #1
 800307a:	d101      	bne.n	8003080 <__sflush_r+0x7c>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b903      	cbnz	r3, 8003082 <__sflush_r+0x7e>
 8003080:	6560      	str	r0, [r4, #84]	; 0x54
 8003082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003084:	602f      	str	r7, [r5, #0]
 8003086:	2900      	cmp	r1, #0
 8003088:	d0c9      	beq.n	800301e <__sflush_r+0x1a>
 800308a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800308e:	4299      	cmp	r1, r3
 8003090:	d002      	beq.n	8003098 <__sflush_r+0x94>
 8003092:	4628      	mov	r0, r5
 8003094:	f000 f96e 	bl	8003374 <_free_r>
 8003098:	2000      	movs	r0, #0
 800309a:	6360      	str	r0, [r4, #52]	; 0x34
 800309c:	e7c0      	b.n	8003020 <__sflush_r+0x1c>
 800309e:	2301      	movs	r3, #1
 80030a0:	4628      	mov	r0, r5
 80030a2:	47b0      	blx	r6
 80030a4:	1c41      	adds	r1, r0, #1
 80030a6:	d1c8      	bne.n	800303a <__sflush_r+0x36>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0c5      	beq.n	800303a <__sflush_r+0x36>
 80030ae:	2b1d      	cmp	r3, #29
 80030b0:	d001      	beq.n	80030b6 <__sflush_r+0xb2>
 80030b2:	2b16      	cmp	r3, #22
 80030b4:	d101      	bne.n	80030ba <__sflush_r+0xb6>
 80030b6:	602f      	str	r7, [r5, #0]
 80030b8:	e7b1      	b.n	800301e <__sflush_r+0x1a>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c0:	81a3      	strh	r3, [r4, #12]
 80030c2:	e7ad      	b.n	8003020 <__sflush_r+0x1c>
 80030c4:	690f      	ldr	r7, [r1, #16]
 80030c6:	2f00      	cmp	r7, #0
 80030c8:	d0a9      	beq.n	800301e <__sflush_r+0x1a>
 80030ca:	0793      	lsls	r3, r2, #30
 80030cc:	bf18      	it	ne
 80030ce:	2300      	movne	r3, #0
 80030d0:	680e      	ldr	r6, [r1, #0]
 80030d2:	bf08      	it	eq
 80030d4:	694b      	ldreq	r3, [r1, #20]
 80030d6:	eba6 0807 	sub.w	r8, r6, r7
 80030da:	600f      	str	r7, [r1, #0]
 80030dc:	608b      	str	r3, [r1, #8]
 80030de:	f1b8 0f00 	cmp.w	r8, #0
 80030e2:	dd9c      	ble.n	800301e <__sflush_r+0x1a>
 80030e4:	4643      	mov	r3, r8
 80030e6:	463a      	mov	r2, r7
 80030e8:	6a21      	ldr	r1, [r4, #32]
 80030ea:	4628      	mov	r0, r5
 80030ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030ee:	47b0      	blx	r6
 80030f0:	2800      	cmp	r0, #0
 80030f2:	dc06      	bgt.n	8003102 <__sflush_r+0xfe>
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fa:	81a3      	strh	r3, [r4, #12]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	e78e      	b.n	8003020 <__sflush_r+0x1c>
 8003102:	4407      	add	r7, r0
 8003104:	eba8 0800 	sub.w	r8, r8, r0
 8003108:	e7e9      	b.n	80030de <__sflush_r+0xda>
 800310a:	bf00      	nop
 800310c:	20400001 	.word	0x20400001

08003110 <_fflush_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	690b      	ldr	r3, [r1, #16]
 8003114:	4605      	mov	r5, r0
 8003116:	460c      	mov	r4, r1
 8003118:	b1db      	cbz	r3, 8003152 <_fflush_r+0x42>
 800311a:	b118      	cbz	r0, 8003124 <_fflush_r+0x14>
 800311c:	6983      	ldr	r3, [r0, #24]
 800311e:	b90b      	cbnz	r3, 8003124 <_fflush_r+0x14>
 8003120:	f000 f872 	bl	8003208 <__sinit>
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <_fflush_r+0x48>)
 8003126:	429c      	cmp	r4, r3
 8003128:	d109      	bne.n	800313e <_fflush_r+0x2e>
 800312a:	686c      	ldr	r4, [r5, #4]
 800312c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003130:	b17b      	cbz	r3, 8003152 <_fflush_r+0x42>
 8003132:	4621      	mov	r1, r4
 8003134:	4628      	mov	r0, r5
 8003136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800313a:	f7ff bf63 	b.w	8003004 <__sflush_r>
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <_fflush_r+0x4c>)
 8003140:	429c      	cmp	r4, r3
 8003142:	d101      	bne.n	8003148 <_fflush_r+0x38>
 8003144:	68ac      	ldr	r4, [r5, #8]
 8003146:	e7f1      	b.n	800312c <_fflush_r+0x1c>
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <_fflush_r+0x50>)
 800314a:	429c      	cmp	r4, r3
 800314c:	bf08      	it	eq
 800314e:	68ec      	ldreq	r4, [r5, #12]
 8003150:	e7ec      	b.n	800312c <_fflush_r+0x1c>
 8003152:	2000      	movs	r0, #0
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	08004744 	.word	0x08004744
 800315c:	08004764 	.word	0x08004764
 8003160:	08004724 	.word	0x08004724

08003164 <fflush>:
 8003164:	4601      	mov	r1, r0
 8003166:	b920      	cbnz	r0, 8003172 <fflush+0xe>
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <fflush+0x18>)
 800316a:	4905      	ldr	r1, [pc, #20]	; (8003180 <fflush+0x1c>)
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f000 b8b7 	b.w	80032e0 <_fwalk_reent>
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <fflush+0x20>)
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f7ff bfcb 	b.w	8003110 <_fflush_r>
 800317a:	bf00      	nop
 800317c:	08004784 	.word	0x08004784
 8003180:	08003111 	.word	0x08003111
 8003184:	20000010 	.word	0x20000010

08003188 <std>:
 8003188:	2300      	movs	r3, #0
 800318a:	b510      	push	{r4, lr}
 800318c:	4604      	mov	r4, r0
 800318e:	e9c0 3300 	strd	r3, r3, [r0]
 8003192:	6083      	str	r3, [r0, #8]
 8003194:	8181      	strh	r1, [r0, #12]
 8003196:	6643      	str	r3, [r0, #100]	; 0x64
 8003198:	81c2      	strh	r2, [r0, #14]
 800319a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800319e:	6183      	str	r3, [r0, #24]
 80031a0:	4619      	mov	r1, r3
 80031a2:	2208      	movs	r2, #8
 80031a4:	305c      	adds	r0, #92	; 0x5c
 80031a6:	f000 f8dd 	bl	8003364 <memset>
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <std+0x38>)
 80031ac:	6224      	str	r4, [r4, #32]
 80031ae:	6263      	str	r3, [r4, #36]	; 0x24
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <std+0x3c>)
 80031b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <std+0x40>)
 80031b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <std+0x44>)
 80031ba:	6323      	str	r3, [r4, #48]	; 0x30
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	bf00      	nop
 80031c0:	08003601 	.word	0x08003601
 80031c4:	08003623 	.word	0x08003623
 80031c8:	0800365b 	.word	0x0800365b
 80031cc:	0800367f 	.word	0x0800367f

080031d0 <_cleanup_r>:
 80031d0:	4901      	ldr	r1, [pc, #4]	; (80031d8 <_cleanup_r+0x8>)
 80031d2:	f000 b885 	b.w	80032e0 <_fwalk_reent>
 80031d6:	bf00      	nop
 80031d8:	08003111 	.word	0x08003111

080031dc <__sfmoreglue>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2568      	movs	r5, #104	; 0x68
 80031e0:	1e4a      	subs	r2, r1, #1
 80031e2:	4355      	muls	r5, r2
 80031e4:	460e      	mov	r6, r1
 80031e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031ea:	f000 f90f 	bl	800340c <_malloc_r>
 80031ee:	4604      	mov	r4, r0
 80031f0:	b140      	cbz	r0, 8003204 <__sfmoreglue+0x28>
 80031f2:	2100      	movs	r1, #0
 80031f4:	e9c0 1600 	strd	r1, r6, [r0]
 80031f8:	300c      	adds	r0, #12
 80031fa:	60a0      	str	r0, [r4, #8]
 80031fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003200:	f000 f8b0 	bl	8003364 <memset>
 8003204:	4620      	mov	r0, r4
 8003206:	bd70      	pop	{r4, r5, r6, pc}

08003208 <__sinit>:
 8003208:	6983      	ldr	r3, [r0, #24]
 800320a:	b510      	push	{r4, lr}
 800320c:	4604      	mov	r4, r0
 800320e:	bb33      	cbnz	r3, 800325e <__sinit+0x56>
 8003210:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003214:	6503      	str	r3, [r0, #80]	; 0x50
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <__sinit+0x58>)
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <__sinit+0x5c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6282      	str	r2, [r0, #40]	; 0x28
 800321e:	4298      	cmp	r0, r3
 8003220:	bf04      	itt	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	6183      	streq	r3, [r0, #24]
 8003226:	f000 f81f 	bl	8003268 <__sfp>
 800322a:	6060      	str	r0, [r4, #4]
 800322c:	4620      	mov	r0, r4
 800322e:	f000 f81b 	bl	8003268 <__sfp>
 8003232:	60a0      	str	r0, [r4, #8]
 8003234:	4620      	mov	r0, r4
 8003236:	f000 f817 	bl	8003268 <__sfp>
 800323a:	2200      	movs	r2, #0
 800323c:	60e0      	str	r0, [r4, #12]
 800323e:	2104      	movs	r1, #4
 8003240:	6860      	ldr	r0, [r4, #4]
 8003242:	f7ff ffa1 	bl	8003188 <std>
 8003246:	2201      	movs	r2, #1
 8003248:	2109      	movs	r1, #9
 800324a:	68a0      	ldr	r0, [r4, #8]
 800324c:	f7ff ff9c 	bl	8003188 <std>
 8003250:	2202      	movs	r2, #2
 8003252:	2112      	movs	r1, #18
 8003254:	68e0      	ldr	r0, [r4, #12]
 8003256:	f7ff ff97 	bl	8003188 <std>
 800325a:	2301      	movs	r3, #1
 800325c:	61a3      	str	r3, [r4, #24]
 800325e:	bd10      	pop	{r4, pc}
 8003260:	08004784 	.word	0x08004784
 8003264:	080031d1 	.word	0x080031d1

08003268 <__sfp>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <__sfp+0x70>)
 800326c:	4607      	mov	r7, r0
 800326e:	681e      	ldr	r6, [r3, #0]
 8003270:	69b3      	ldr	r3, [r6, #24]
 8003272:	b913      	cbnz	r3, 800327a <__sfp+0x12>
 8003274:	4630      	mov	r0, r6
 8003276:	f7ff ffc7 	bl	8003208 <__sinit>
 800327a:	3648      	adds	r6, #72	; 0x48
 800327c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003280:	3b01      	subs	r3, #1
 8003282:	d503      	bpl.n	800328c <__sfp+0x24>
 8003284:	6833      	ldr	r3, [r6, #0]
 8003286:	b133      	cbz	r3, 8003296 <__sfp+0x2e>
 8003288:	6836      	ldr	r6, [r6, #0]
 800328a:	e7f7      	b.n	800327c <__sfp+0x14>
 800328c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003290:	b16d      	cbz	r5, 80032ae <__sfp+0x46>
 8003292:	3468      	adds	r4, #104	; 0x68
 8003294:	e7f4      	b.n	8003280 <__sfp+0x18>
 8003296:	2104      	movs	r1, #4
 8003298:	4638      	mov	r0, r7
 800329a:	f7ff ff9f 	bl	80031dc <__sfmoreglue>
 800329e:	6030      	str	r0, [r6, #0]
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d1f1      	bne.n	8003288 <__sfp+0x20>
 80032a4:	230c      	movs	r3, #12
 80032a6:	4604      	mov	r4, r0
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4620      	mov	r0, r4
 80032ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <__sfp+0x74>)
 80032b0:	6665      	str	r5, [r4, #100]	; 0x64
 80032b2:	e9c4 5500 	strd	r5, r5, [r4]
 80032b6:	60a5      	str	r5, [r4, #8]
 80032b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80032bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80032c0:	2208      	movs	r2, #8
 80032c2:	4629      	mov	r1, r5
 80032c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032c8:	f000 f84c 	bl	8003364 <memset>
 80032cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032d4:	e7e9      	b.n	80032aa <__sfp+0x42>
 80032d6:	bf00      	nop
 80032d8:	08004784 	.word	0x08004784
 80032dc:	ffff0001 	.word	0xffff0001

080032e0 <_fwalk_reent>:
 80032e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
 80032e8:	2600      	movs	r6, #0
 80032ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032ee:	b914      	cbnz	r4, 80032f6 <_fwalk_reent+0x16>
 80032f0:	4630      	mov	r0, r6
 80032f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80032fa:	3f01      	subs	r7, #1
 80032fc:	d501      	bpl.n	8003302 <_fwalk_reent+0x22>
 80032fe:	6824      	ldr	r4, [r4, #0]
 8003300:	e7f5      	b.n	80032ee <_fwalk_reent+0xe>
 8003302:	89ab      	ldrh	r3, [r5, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d907      	bls.n	8003318 <_fwalk_reent+0x38>
 8003308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800330c:	3301      	adds	r3, #1
 800330e:	d003      	beq.n	8003318 <_fwalk_reent+0x38>
 8003310:	4629      	mov	r1, r5
 8003312:	4640      	mov	r0, r8
 8003314:	47c8      	blx	r9
 8003316:	4306      	orrs	r6, r0
 8003318:	3568      	adds	r5, #104	; 0x68
 800331a:	e7ee      	b.n	80032fa <_fwalk_reent+0x1a>

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	2500      	movs	r5, #0
 8003320:	4e0c      	ldr	r6, [pc, #48]	; (8003354 <__libc_init_array+0x38>)
 8003322:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003324:	1ba4      	subs	r4, r4, r6
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	42a5      	cmp	r5, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	f000 fe44 	bl	8003fb8 <_init>
 8003330:	2500      	movs	r5, #0
 8003332:	4e0a      	ldr	r6, [pc, #40]	; (800335c <__libc_init_array+0x40>)
 8003334:	4c0a      	ldr	r4, [pc, #40]	; (8003360 <__libc_init_array+0x44>)
 8003336:	1ba4      	subs	r4, r4, r6
 8003338:	10a4      	asrs	r4, r4, #2
 800333a:	42a5      	cmp	r5, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003344:	4798      	blx	r3
 8003346:	3501      	adds	r5, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800334e:	4798      	blx	r3
 8003350:	3501      	adds	r5, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	080047bc 	.word	0x080047bc
 8003358:	080047bc 	.word	0x080047bc
 800335c:	080047bc 	.word	0x080047bc
 8003360:	080047c0 	.word	0x080047c0

08003364 <memset>:
 8003364:	4603      	mov	r3, r0
 8003366:	4402      	add	r2, r0
 8003368:	4293      	cmp	r3, r2
 800336a:	d100      	bne.n	800336e <memset+0xa>
 800336c:	4770      	bx	lr
 800336e:	f803 1b01 	strb.w	r1, [r3], #1
 8003372:	e7f9      	b.n	8003368 <memset+0x4>

08003374 <_free_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4605      	mov	r5, r0
 8003378:	2900      	cmp	r1, #0
 800337a:	d043      	beq.n	8003404 <_free_r+0x90>
 800337c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003380:	1f0c      	subs	r4, r1, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	bfb8      	it	lt
 8003386:	18e4      	addlt	r4, r4, r3
 8003388:	f000 fad6 	bl	8003938 <__malloc_lock>
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <_free_r+0x94>)
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	4610      	mov	r0, r2
 8003392:	b933      	cbnz	r3, 80033a2 <_free_r+0x2e>
 8003394:	6063      	str	r3, [r4, #4]
 8003396:	6014      	str	r4, [r2, #0]
 8003398:	4628      	mov	r0, r5
 800339a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800339e:	f000 bacc 	b.w	800393a <__malloc_unlock>
 80033a2:	42a3      	cmp	r3, r4
 80033a4:	d90b      	bls.n	80033be <_free_r+0x4a>
 80033a6:	6821      	ldr	r1, [r4, #0]
 80033a8:	1862      	adds	r2, r4, r1
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bf01      	itttt	eq
 80033ae:	681a      	ldreq	r2, [r3, #0]
 80033b0:	685b      	ldreq	r3, [r3, #4]
 80033b2:	1852      	addeq	r2, r2, r1
 80033b4:	6022      	streq	r2, [r4, #0]
 80033b6:	6063      	str	r3, [r4, #4]
 80033b8:	6004      	str	r4, [r0, #0]
 80033ba:	e7ed      	b.n	8003398 <_free_r+0x24>
 80033bc:	4613      	mov	r3, r2
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	b10a      	cbz	r2, 80033c6 <_free_r+0x52>
 80033c2:	42a2      	cmp	r2, r4
 80033c4:	d9fa      	bls.n	80033bc <_free_r+0x48>
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	1858      	adds	r0, r3, r1
 80033ca:	42a0      	cmp	r0, r4
 80033cc:	d10b      	bne.n	80033e6 <_free_r+0x72>
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	4401      	add	r1, r0
 80033d2:	1858      	adds	r0, r3, r1
 80033d4:	4282      	cmp	r2, r0
 80033d6:	6019      	str	r1, [r3, #0]
 80033d8:	d1de      	bne.n	8003398 <_free_r+0x24>
 80033da:	6810      	ldr	r0, [r2, #0]
 80033dc:	6852      	ldr	r2, [r2, #4]
 80033de:	4401      	add	r1, r0
 80033e0:	6019      	str	r1, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e7d8      	b.n	8003398 <_free_r+0x24>
 80033e6:	d902      	bls.n	80033ee <_free_r+0x7a>
 80033e8:	230c      	movs	r3, #12
 80033ea:	602b      	str	r3, [r5, #0]
 80033ec:	e7d4      	b.n	8003398 <_free_r+0x24>
 80033ee:	6820      	ldr	r0, [r4, #0]
 80033f0:	1821      	adds	r1, r4, r0
 80033f2:	428a      	cmp	r2, r1
 80033f4:	bf01      	itttt	eq
 80033f6:	6811      	ldreq	r1, [r2, #0]
 80033f8:	6852      	ldreq	r2, [r2, #4]
 80033fa:	1809      	addeq	r1, r1, r0
 80033fc:	6021      	streq	r1, [r4, #0]
 80033fe:	6062      	str	r2, [r4, #4]
 8003400:	605c      	str	r4, [r3, #4]
 8003402:	e7c9      	b.n	8003398 <_free_r+0x24>
 8003404:	bd38      	pop	{r3, r4, r5, pc}
 8003406:	bf00      	nop
 8003408:	20000ee4 	.word	0x20000ee4

0800340c <_malloc_r>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	1ccd      	adds	r5, r1, #3
 8003410:	f025 0503 	bic.w	r5, r5, #3
 8003414:	3508      	adds	r5, #8
 8003416:	2d0c      	cmp	r5, #12
 8003418:	bf38      	it	cc
 800341a:	250c      	movcc	r5, #12
 800341c:	2d00      	cmp	r5, #0
 800341e:	4606      	mov	r6, r0
 8003420:	db01      	blt.n	8003426 <_malloc_r+0x1a>
 8003422:	42a9      	cmp	r1, r5
 8003424:	d903      	bls.n	800342e <_malloc_r+0x22>
 8003426:	230c      	movs	r3, #12
 8003428:	6033      	str	r3, [r6, #0]
 800342a:	2000      	movs	r0, #0
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	f000 fa83 	bl	8003938 <__malloc_lock>
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <_malloc_r+0xac>)
 8003434:	6814      	ldr	r4, [r2, #0]
 8003436:	4621      	mov	r1, r4
 8003438:	b991      	cbnz	r1, 8003460 <_malloc_r+0x54>
 800343a:	4c20      	ldr	r4, [pc, #128]	; (80034bc <_malloc_r+0xb0>)
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	b91b      	cbnz	r3, 8003448 <_malloc_r+0x3c>
 8003440:	4630      	mov	r0, r6
 8003442:	f000 f8cd 	bl	80035e0 <_sbrk_r>
 8003446:	6020      	str	r0, [r4, #0]
 8003448:	4629      	mov	r1, r5
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f8c8 	bl	80035e0 <_sbrk_r>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d124      	bne.n	800349e <_malloc_r+0x92>
 8003454:	230c      	movs	r3, #12
 8003456:	4630      	mov	r0, r6
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	f000 fa6e 	bl	800393a <__malloc_unlock>
 800345e:	e7e4      	b.n	800342a <_malloc_r+0x1e>
 8003460:	680b      	ldr	r3, [r1, #0]
 8003462:	1b5b      	subs	r3, r3, r5
 8003464:	d418      	bmi.n	8003498 <_malloc_r+0x8c>
 8003466:	2b0b      	cmp	r3, #11
 8003468:	d90f      	bls.n	800348a <_malloc_r+0x7e>
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	18cc      	adds	r4, r1, r3
 800346e:	50cd      	str	r5, [r1, r3]
 8003470:	4630      	mov	r0, r6
 8003472:	f000 fa62 	bl	800393a <__malloc_unlock>
 8003476:	f104 000b 	add.w	r0, r4, #11
 800347a:	1d23      	adds	r3, r4, #4
 800347c:	f020 0007 	bic.w	r0, r0, #7
 8003480:	1ac3      	subs	r3, r0, r3
 8003482:	d0d3      	beq.n	800342c <_malloc_r+0x20>
 8003484:	425a      	negs	r2, r3
 8003486:	50e2      	str	r2, [r4, r3]
 8003488:	e7d0      	b.n	800342c <_malloc_r+0x20>
 800348a:	684b      	ldr	r3, [r1, #4]
 800348c:	428c      	cmp	r4, r1
 800348e:	bf16      	itet	ne
 8003490:	6063      	strne	r3, [r4, #4]
 8003492:	6013      	streq	r3, [r2, #0]
 8003494:	460c      	movne	r4, r1
 8003496:	e7eb      	b.n	8003470 <_malloc_r+0x64>
 8003498:	460c      	mov	r4, r1
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	e7cc      	b.n	8003438 <_malloc_r+0x2c>
 800349e:	1cc4      	adds	r4, r0, #3
 80034a0:	f024 0403 	bic.w	r4, r4, #3
 80034a4:	42a0      	cmp	r0, r4
 80034a6:	d005      	beq.n	80034b4 <_malloc_r+0xa8>
 80034a8:	1a21      	subs	r1, r4, r0
 80034aa:	4630      	mov	r0, r6
 80034ac:	f000 f898 	bl	80035e0 <_sbrk_r>
 80034b0:	3001      	adds	r0, #1
 80034b2:	d0cf      	beq.n	8003454 <_malloc_r+0x48>
 80034b4:	6025      	str	r5, [r4, #0]
 80034b6:	e7db      	b.n	8003470 <_malloc_r+0x64>
 80034b8:	20000ee4 	.word	0x20000ee4
 80034bc:	20000ee8 	.word	0x20000ee8

080034c0 <iprintf>:
 80034c0:	b40f      	push	{r0, r1, r2, r3}
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <iprintf+0x2c>)
 80034c4:	b513      	push	{r0, r1, r4, lr}
 80034c6:	681c      	ldr	r4, [r3, #0]
 80034c8:	b124      	cbz	r4, 80034d4 <iprintf+0x14>
 80034ca:	69a3      	ldr	r3, [r4, #24]
 80034cc:	b913      	cbnz	r3, 80034d4 <iprintf+0x14>
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff fe9a 	bl	8003208 <__sinit>
 80034d4:	ab05      	add	r3, sp, #20
 80034d6:	9a04      	ldr	r2, [sp, #16]
 80034d8:	68a1      	ldr	r1, [r4, #8]
 80034da:	4620      	mov	r0, r4
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	f000 fa55 	bl	800398c <_vfiprintf_r>
 80034e2:	b002      	add	sp, #8
 80034e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e8:	b004      	add	sp, #16
 80034ea:	4770      	bx	lr
 80034ec:	20000010 	.word	0x20000010

080034f0 <putchar>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <putchar+0x24>)
 80034f4:	4605      	mov	r5, r0
 80034f6:	681c      	ldr	r4, [r3, #0]
 80034f8:	b124      	cbz	r4, 8003504 <putchar+0x14>
 80034fa:	69a3      	ldr	r3, [r4, #24]
 80034fc:	b913      	cbnz	r3, 8003504 <putchar+0x14>
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff fe82 	bl	8003208 <__sinit>
 8003504:	68a2      	ldr	r2, [r4, #8]
 8003506:	4629      	mov	r1, r5
 8003508:	4620      	mov	r0, r4
 800350a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800350e:	f000 bcdb 	b.w	8003ec8 <_putc_r>
 8003512:	bf00      	nop
 8003514:	20000010 	.word	0x20000010

08003518 <_puts_r>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	460e      	mov	r6, r1
 800351c:	4605      	mov	r5, r0
 800351e:	b118      	cbz	r0, 8003528 <_puts_r+0x10>
 8003520:	6983      	ldr	r3, [r0, #24]
 8003522:	b90b      	cbnz	r3, 8003528 <_puts_r+0x10>
 8003524:	f7ff fe70 	bl	8003208 <__sinit>
 8003528:	69ab      	ldr	r3, [r5, #24]
 800352a:	68ac      	ldr	r4, [r5, #8]
 800352c:	b913      	cbnz	r3, 8003534 <_puts_r+0x1c>
 800352e:	4628      	mov	r0, r5
 8003530:	f7ff fe6a 	bl	8003208 <__sinit>
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <_puts_r+0xac>)
 8003536:	429c      	cmp	r4, r3
 8003538:	d117      	bne.n	800356a <_puts_r+0x52>
 800353a:	686c      	ldr	r4, [r5, #4]
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	071b      	lsls	r3, r3, #28
 8003540:	d51d      	bpl.n	800357e <_puts_r+0x66>
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	b1db      	cbz	r3, 800357e <_puts_r+0x66>
 8003546:	3e01      	subs	r6, #1
 8003548:	68a3      	ldr	r3, [r4, #8]
 800354a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800354e:	3b01      	subs	r3, #1
 8003550:	60a3      	str	r3, [r4, #8]
 8003552:	b9e9      	cbnz	r1, 8003590 <_puts_r+0x78>
 8003554:	2b00      	cmp	r3, #0
 8003556:	da2e      	bge.n	80035b6 <_puts_r+0x9e>
 8003558:	4622      	mov	r2, r4
 800355a:	210a      	movs	r1, #10
 800355c:	4628      	mov	r0, r5
 800355e:	f000 f893 	bl	8003688 <__swbuf_r>
 8003562:	3001      	adds	r0, #1
 8003564:	d011      	beq.n	800358a <_puts_r+0x72>
 8003566:	200a      	movs	r0, #10
 8003568:	e011      	b.n	800358e <_puts_r+0x76>
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <_puts_r+0xb0>)
 800356c:	429c      	cmp	r4, r3
 800356e:	d101      	bne.n	8003574 <_puts_r+0x5c>
 8003570:	68ac      	ldr	r4, [r5, #8]
 8003572:	e7e3      	b.n	800353c <_puts_r+0x24>
 8003574:	4b15      	ldr	r3, [pc, #84]	; (80035cc <_puts_r+0xb4>)
 8003576:	429c      	cmp	r4, r3
 8003578:	bf08      	it	eq
 800357a:	68ec      	ldreq	r4, [r5, #12]
 800357c:	e7de      	b.n	800353c <_puts_r+0x24>
 800357e:	4621      	mov	r1, r4
 8003580:	4628      	mov	r0, r5
 8003582:	f000 f8e5 	bl	8003750 <__swsetup_r>
 8003586:	2800      	cmp	r0, #0
 8003588:	d0dd      	beq.n	8003546 <_puts_r+0x2e>
 800358a:	f04f 30ff 	mov.w	r0, #4294967295
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	2b00      	cmp	r3, #0
 8003592:	da04      	bge.n	800359e <_puts_r+0x86>
 8003594:	69a2      	ldr	r2, [r4, #24]
 8003596:	429a      	cmp	r2, r3
 8003598:	dc06      	bgt.n	80035a8 <_puts_r+0x90>
 800359a:	290a      	cmp	r1, #10
 800359c:	d004      	beq.n	80035a8 <_puts_r+0x90>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	6022      	str	r2, [r4, #0]
 80035a4:	7019      	strb	r1, [r3, #0]
 80035a6:	e7cf      	b.n	8003548 <_puts_r+0x30>
 80035a8:	4622      	mov	r2, r4
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 f86c 	bl	8003688 <__swbuf_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d1c9      	bne.n	8003548 <_puts_r+0x30>
 80035b4:	e7e9      	b.n	800358a <_puts_r+0x72>
 80035b6:	200a      	movs	r0, #10
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	7018      	strb	r0, [r3, #0]
 80035c0:	e7e5      	b.n	800358e <_puts_r+0x76>
 80035c2:	bf00      	nop
 80035c4:	08004744 	.word	0x08004744
 80035c8:	08004764 	.word	0x08004764
 80035cc:	08004724 	.word	0x08004724

080035d0 <puts>:
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <puts+0xc>)
 80035d2:	4601      	mov	r1, r0
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f7ff bf9f 	b.w	8003518 <_puts_r>
 80035da:	bf00      	nop
 80035dc:	20000010 	.word	0x20000010

080035e0 <_sbrk_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	2300      	movs	r3, #0
 80035e4:	4c05      	ldr	r4, [pc, #20]	; (80035fc <_sbrk_r+0x1c>)
 80035e6:	4605      	mov	r5, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	f7ff fc3a 	bl	8002e64 <_sbrk>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d102      	bne.n	80035fa <_sbrk_r+0x1a>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	b103      	cbz	r3, 80035fa <_sbrk_r+0x1a>
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	20000f58 	.word	0x20000f58

08003600 <__sread>:
 8003600:	b510      	push	{r4, lr}
 8003602:	460c      	mov	r4, r1
 8003604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003608:	f000 fc94 	bl	8003f34 <_read_r>
 800360c:	2800      	cmp	r0, #0
 800360e:	bfab      	itete	ge
 8003610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003612:	89a3      	ldrhlt	r3, [r4, #12]
 8003614:	181b      	addge	r3, r3, r0
 8003616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800361a:	bfac      	ite	ge
 800361c:	6563      	strge	r3, [r4, #84]	; 0x54
 800361e:	81a3      	strhlt	r3, [r4, #12]
 8003620:	bd10      	pop	{r4, pc}

08003622 <__swrite>:
 8003622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003626:	461f      	mov	r7, r3
 8003628:	898b      	ldrh	r3, [r1, #12]
 800362a:	4605      	mov	r5, r0
 800362c:	05db      	lsls	r3, r3, #23
 800362e:	460c      	mov	r4, r1
 8003630:	4616      	mov	r6, r2
 8003632:	d505      	bpl.n	8003640 <__swrite+0x1e>
 8003634:	2302      	movs	r3, #2
 8003636:	2200      	movs	r2, #0
 8003638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800363c:	f000 f906 	bl	800384c <_lseek_r>
 8003640:	89a3      	ldrh	r3, [r4, #12]
 8003642:	4632      	mov	r2, r6
 8003644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800364e:	463b      	mov	r3, r7
 8003650:	4628      	mov	r0, r5
 8003652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003656:	f000 b869 	b.w	800372c <_write_r>

0800365a <__sseek>:
 800365a:	b510      	push	{r4, lr}
 800365c:	460c      	mov	r4, r1
 800365e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003662:	f000 f8f3 	bl	800384c <_lseek_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	bf15      	itete	ne
 800366c:	6560      	strne	r0, [r4, #84]	; 0x54
 800366e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003676:	81a3      	strheq	r3, [r4, #12]
 8003678:	bf18      	it	ne
 800367a:	81a3      	strhne	r3, [r4, #12]
 800367c:	bd10      	pop	{r4, pc}

0800367e <__sclose>:
 800367e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003682:	f000 b8d3 	b.w	800382c <_close_r>
	...

08003688 <__swbuf_r>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	460e      	mov	r6, r1
 800368c:	4614      	mov	r4, r2
 800368e:	4605      	mov	r5, r0
 8003690:	b118      	cbz	r0, 800369a <__swbuf_r+0x12>
 8003692:	6983      	ldr	r3, [r0, #24]
 8003694:	b90b      	cbnz	r3, 800369a <__swbuf_r+0x12>
 8003696:	f7ff fdb7 	bl	8003208 <__sinit>
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <__swbuf_r+0x98>)
 800369c:	429c      	cmp	r4, r3
 800369e:	d12a      	bne.n	80036f6 <__swbuf_r+0x6e>
 80036a0:	686c      	ldr	r4, [r5, #4]
 80036a2:	69a3      	ldr	r3, [r4, #24]
 80036a4:	60a3      	str	r3, [r4, #8]
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	071a      	lsls	r2, r3, #28
 80036aa:	d52e      	bpl.n	800370a <__swbuf_r+0x82>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	b363      	cbz	r3, 800370a <__swbuf_r+0x82>
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	b2f6      	uxtb	r6, r6
 80036b6:	1ac0      	subs	r0, r0, r3
 80036b8:	6963      	ldr	r3, [r4, #20]
 80036ba:	4637      	mov	r7, r6
 80036bc:	4283      	cmp	r3, r0
 80036be:	dc04      	bgt.n	80036ca <__swbuf_r+0x42>
 80036c0:	4621      	mov	r1, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	f7ff fd24 	bl	8003110 <_fflush_r>
 80036c8:	bb28      	cbnz	r0, 8003716 <__swbuf_r+0x8e>
 80036ca:	68a3      	ldr	r3, [r4, #8]
 80036cc:	3001      	adds	r0, #1
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60a3      	str	r3, [r4, #8]
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	6022      	str	r2, [r4, #0]
 80036d8:	701e      	strb	r6, [r3, #0]
 80036da:	6963      	ldr	r3, [r4, #20]
 80036dc:	4283      	cmp	r3, r0
 80036de:	d004      	beq.n	80036ea <__swbuf_r+0x62>
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	07db      	lsls	r3, r3, #31
 80036e4:	d519      	bpl.n	800371a <__swbuf_r+0x92>
 80036e6:	2e0a      	cmp	r6, #10
 80036e8:	d117      	bne.n	800371a <__swbuf_r+0x92>
 80036ea:	4621      	mov	r1, r4
 80036ec:	4628      	mov	r0, r5
 80036ee:	f7ff fd0f 	bl	8003110 <_fflush_r>
 80036f2:	b190      	cbz	r0, 800371a <__swbuf_r+0x92>
 80036f4:	e00f      	b.n	8003716 <__swbuf_r+0x8e>
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <__swbuf_r+0x9c>)
 80036f8:	429c      	cmp	r4, r3
 80036fa:	d101      	bne.n	8003700 <__swbuf_r+0x78>
 80036fc:	68ac      	ldr	r4, [r5, #8]
 80036fe:	e7d0      	b.n	80036a2 <__swbuf_r+0x1a>
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <__swbuf_r+0xa0>)
 8003702:	429c      	cmp	r4, r3
 8003704:	bf08      	it	eq
 8003706:	68ec      	ldreq	r4, [r5, #12]
 8003708:	e7cb      	b.n	80036a2 <__swbuf_r+0x1a>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 f81f 	bl	8003750 <__swsetup_r>
 8003712:	2800      	cmp	r0, #0
 8003714:	d0cc      	beq.n	80036b0 <__swbuf_r+0x28>
 8003716:	f04f 37ff 	mov.w	r7, #4294967295
 800371a:	4638      	mov	r0, r7
 800371c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800371e:	bf00      	nop
 8003720:	08004744 	.word	0x08004744
 8003724:	08004764 	.word	0x08004764
 8003728:	08004724 	.word	0x08004724

0800372c <_write_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	2200      	movs	r2, #0
 8003736:	4c05      	ldr	r4, [pc, #20]	; (800374c <_write_r+0x20>)
 8003738:	6022      	str	r2, [r4, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f7ff fb46 	bl	8002dcc <_write>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_write_r+0x1e>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	b103      	cbz	r3, 800374a <_write_r+0x1e>
 8003748:	602b      	str	r3, [r5, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	20000f58 	.word	0x20000f58

08003750 <__swsetup_r>:
 8003750:	4b32      	ldr	r3, [pc, #200]	; (800381c <__swsetup_r+0xcc>)
 8003752:	b570      	push	{r4, r5, r6, lr}
 8003754:	681d      	ldr	r5, [r3, #0]
 8003756:	4606      	mov	r6, r0
 8003758:	460c      	mov	r4, r1
 800375a:	b125      	cbz	r5, 8003766 <__swsetup_r+0x16>
 800375c:	69ab      	ldr	r3, [r5, #24]
 800375e:	b913      	cbnz	r3, 8003766 <__swsetup_r+0x16>
 8003760:	4628      	mov	r0, r5
 8003762:	f7ff fd51 	bl	8003208 <__sinit>
 8003766:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <__swsetup_r+0xd0>)
 8003768:	429c      	cmp	r4, r3
 800376a:	d10f      	bne.n	800378c <__swsetup_r+0x3c>
 800376c:	686c      	ldr	r4, [r5, #4]
 800376e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003772:	b29a      	uxth	r2, r3
 8003774:	0715      	lsls	r5, r2, #28
 8003776:	d42c      	bmi.n	80037d2 <__swsetup_r+0x82>
 8003778:	06d0      	lsls	r0, r2, #27
 800377a:	d411      	bmi.n	80037a0 <__swsetup_r+0x50>
 800377c:	2209      	movs	r2, #9
 800377e:	6032      	str	r2, [r6, #0]
 8003780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	f04f 30ff 	mov.w	r0, #4294967295
 800378a:	e03e      	b.n	800380a <__swsetup_r+0xba>
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <__swsetup_r+0xd4>)
 800378e:	429c      	cmp	r4, r3
 8003790:	d101      	bne.n	8003796 <__swsetup_r+0x46>
 8003792:	68ac      	ldr	r4, [r5, #8]
 8003794:	e7eb      	b.n	800376e <__swsetup_r+0x1e>
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <__swsetup_r+0xd8>)
 8003798:	429c      	cmp	r4, r3
 800379a:	bf08      	it	eq
 800379c:	68ec      	ldreq	r4, [r5, #12]
 800379e:	e7e6      	b.n	800376e <__swsetup_r+0x1e>
 80037a0:	0751      	lsls	r1, r2, #29
 80037a2:	d512      	bpl.n	80037ca <__swsetup_r+0x7a>
 80037a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037a6:	b141      	cbz	r1, 80037ba <__swsetup_r+0x6a>
 80037a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ac:	4299      	cmp	r1, r3
 80037ae:	d002      	beq.n	80037b6 <__swsetup_r+0x66>
 80037b0:	4630      	mov	r0, r6
 80037b2:	f7ff fddf 	bl	8003374 <_free_r>
 80037b6:	2300      	movs	r3, #0
 80037b8:	6363      	str	r3, [r4, #52]	; 0x34
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037c0:	81a3      	strh	r3, [r4, #12]
 80037c2:	2300      	movs	r3, #0
 80037c4:	6063      	str	r3, [r4, #4]
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	6923      	ldr	r3, [r4, #16]
 80037d4:	b94b      	cbnz	r3, 80037ea <__swsetup_r+0x9a>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	d003      	beq.n	80037ea <__swsetup_r+0x9a>
 80037e2:	4621      	mov	r1, r4
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 f867 	bl	80038b8 <__smakebuf_r>
 80037ea:	89a2      	ldrh	r2, [r4, #12]
 80037ec:	f012 0301 	ands.w	r3, r2, #1
 80037f0:	d00c      	beq.n	800380c <__swsetup_r+0xbc>
 80037f2:	2300      	movs	r3, #0
 80037f4:	60a3      	str	r3, [r4, #8]
 80037f6:	6963      	ldr	r3, [r4, #20]
 80037f8:	425b      	negs	r3, r3
 80037fa:	61a3      	str	r3, [r4, #24]
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	b953      	cbnz	r3, 8003816 <__swsetup_r+0xc6>
 8003800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003804:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003808:	d1ba      	bne.n	8003780 <__swsetup_r+0x30>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	0792      	lsls	r2, r2, #30
 800380e:	bf58      	it	pl
 8003810:	6963      	ldrpl	r3, [r4, #20]
 8003812:	60a3      	str	r3, [r4, #8]
 8003814:	e7f2      	b.n	80037fc <__swsetup_r+0xac>
 8003816:	2000      	movs	r0, #0
 8003818:	e7f7      	b.n	800380a <__swsetup_r+0xba>
 800381a:	bf00      	nop
 800381c:	20000010 	.word	0x20000010
 8003820:	08004744 	.word	0x08004744
 8003824:	08004764 	.word	0x08004764
 8003828:	08004724 	.word	0x08004724

0800382c <_close_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	2300      	movs	r3, #0
 8003830:	4c05      	ldr	r4, [pc, #20]	; (8003848 <_close_r+0x1c>)
 8003832:	4605      	mov	r5, r0
 8003834:	4608      	mov	r0, r1
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	f7ff fae4 	bl	8002e04 <_close>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_close_r+0x1a>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	b103      	cbz	r3, 8003846 <_close_r+0x1a>
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	20000f58 	.word	0x20000f58

0800384c <_lseek_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4605      	mov	r5, r0
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	2200      	movs	r2, #0
 8003856:	4c05      	ldr	r4, [pc, #20]	; (800386c <_lseek_r+0x20>)
 8003858:	6022      	str	r2, [r4, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f7ff faf6 	bl	8002e4c <_lseek>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_lseek_r+0x1e>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	b103      	cbz	r3, 800386a <_lseek_r+0x1e>
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	20000f58 	.word	0x20000f58

08003870 <__swhatbuf_r>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	460e      	mov	r6, r1
 8003874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003878:	b096      	sub	sp, #88	; 0x58
 800387a:	2900      	cmp	r1, #0
 800387c:	4614      	mov	r4, r2
 800387e:	461d      	mov	r5, r3
 8003880:	da07      	bge.n	8003892 <__swhatbuf_r+0x22>
 8003882:	2300      	movs	r3, #0
 8003884:	602b      	str	r3, [r5, #0]
 8003886:	89b3      	ldrh	r3, [r6, #12]
 8003888:	061a      	lsls	r2, r3, #24
 800388a:	d410      	bmi.n	80038ae <__swhatbuf_r+0x3e>
 800388c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003890:	e00e      	b.n	80038b0 <__swhatbuf_r+0x40>
 8003892:	466a      	mov	r2, sp
 8003894:	f000 fb60 	bl	8003f58 <_fstat_r>
 8003898:	2800      	cmp	r0, #0
 800389a:	dbf2      	blt.n	8003882 <__swhatbuf_r+0x12>
 800389c:	9a01      	ldr	r2, [sp, #4]
 800389e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038a6:	425a      	negs	r2, r3
 80038a8:	415a      	adcs	r2, r3
 80038aa:	602a      	str	r2, [r5, #0]
 80038ac:	e7ee      	b.n	800388c <__swhatbuf_r+0x1c>
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	2000      	movs	r0, #0
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	b016      	add	sp, #88	; 0x58
 80038b6:	bd70      	pop	{r4, r5, r6, pc}

080038b8 <__smakebuf_r>:
 80038b8:	898b      	ldrh	r3, [r1, #12]
 80038ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038bc:	079d      	lsls	r5, r3, #30
 80038be:	4606      	mov	r6, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	d507      	bpl.n	80038d4 <__smakebuf_r+0x1c>
 80038c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	6123      	str	r3, [r4, #16]
 80038cc:	2301      	movs	r3, #1
 80038ce:	6163      	str	r3, [r4, #20]
 80038d0:	b002      	add	sp, #8
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	ab01      	add	r3, sp, #4
 80038d6:	466a      	mov	r2, sp
 80038d8:	f7ff ffca 	bl	8003870 <__swhatbuf_r>
 80038dc:	9900      	ldr	r1, [sp, #0]
 80038de:	4605      	mov	r5, r0
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7ff fd93 	bl	800340c <_malloc_r>
 80038e6:	b948      	cbnz	r0, 80038fc <__smakebuf_r+0x44>
 80038e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ec:	059a      	lsls	r2, r3, #22
 80038ee:	d4ef      	bmi.n	80038d0 <__smakebuf_r+0x18>
 80038f0:	f023 0303 	bic.w	r3, r3, #3
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	81a3      	strh	r3, [r4, #12]
 80038fa:	e7e3      	b.n	80038c4 <__smakebuf_r+0xc>
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <__smakebuf_r+0x7c>)
 80038fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	6020      	str	r0, [r4, #0]
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	81a3      	strh	r3, [r4, #12]
 800390a:	9b00      	ldr	r3, [sp, #0]
 800390c:	6120      	str	r0, [r4, #16]
 800390e:	6163      	str	r3, [r4, #20]
 8003910:	9b01      	ldr	r3, [sp, #4]
 8003912:	b15b      	cbz	r3, 800392c <__smakebuf_r+0x74>
 8003914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003918:	4630      	mov	r0, r6
 800391a:	f000 fb2f 	bl	8003f7c <_isatty_r>
 800391e:	b128      	cbz	r0, 800392c <__smakebuf_r+0x74>
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	81a3      	strh	r3, [r4, #12]
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	431d      	orrs	r5, r3
 8003930:	81a5      	strh	r5, [r4, #12]
 8003932:	e7cd      	b.n	80038d0 <__smakebuf_r+0x18>
 8003934:	080031d1 	.word	0x080031d1

08003938 <__malloc_lock>:
 8003938:	4770      	bx	lr

0800393a <__malloc_unlock>:
 800393a:	4770      	bx	lr

0800393c <__sfputc_r>:
 800393c:	6893      	ldr	r3, [r2, #8]
 800393e:	b410      	push	{r4}
 8003940:	3b01      	subs	r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	6093      	str	r3, [r2, #8]
 8003946:	da07      	bge.n	8003958 <__sfputc_r+0x1c>
 8003948:	6994      	ldr	r4, [r2, #24]
 800394a:	42a3      	cmp	r3, r4
 800394c:	db01      	blt.n	8003952 <__sfputc_r+0x16>
 800394e:	290a      	cmp	r1, #10
 8003950:	d102      	bne.n	8003958 <__sfputc_r+0x1c>
 8003952:	bc10      	pop	{r4}
 8003954:	f7ff be98 	b.w	8003688 <__swbuf_r>
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	1c58      	adds	r0, r3, #1
 800395c:	6010      	str	r0, [r2, #0]
 800395e:	7019      	strb	r1, [r3, #0]
 8003960:	4608      	mov	r0, r1
 8003962:	bc10      	pop	{r4}
 8003964:	4770      	bx	lr

08003966 <__sfputs_r>:
 8003966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003968:	4606      	mov	r6, r0
 800396a:	460f      	mov	r7, r1
 800396c:	4614      	mov	r4, r2
 800396e:	18d5      	adds	r5, r2, r3
 8003970:	42ac      	cmp	r4, r5
 8003972:	d101      	bne.n	8003978 <__sfputs_r+0x12>
 8003974:	2000      	movs	r0, #0
 8003976:	e007      	b.n	8003988 <__sfputs_r+0x22>
 8003978:	463a      	mov	r2, r7
 800397a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ffdc 	bl	800393c <__sfputc_r>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d1f3      	bne.n	8003970 <__sfputs_r+0xa>
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800398c <_vfiprintf_r>:
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	460c      	mov	r4, r1
 8003992:	b09d      	sub	sp, #116	; 0x74
 8003994:	4617      	mov	r7, r2
 8003996:	461d      	mov	r5, r3
 8003998:	4606      	mov	r6, r0
 800399a:	b118      	cbz	r0, 80039a4 <_vfiprintf_r+0x18>
 800399c:	6983      	ldr	r3, [r0, #24]
 800399e:	b90b      	cbnz	r3, 80039a4 <_vfiprintf_r+0x18>
 80039a0:	f7ff fc32 	bl	8003208 <__sinit>
 80039a4:	4b7c      	ldr	r3, [pc, #496]	; (8003b98 <_vfiprintf_r+0x20c>)
 80039a6:	429c      	cmp	r4, r3
 80039a8:	d158      	bne.n	8003a5c <_vfiprintf_r+0xd0>
 80039aa:	6874      	ldr	r4, [r6, #4]
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	0718      	lsls	r0, r3, #28
 80039b0:	d55e      	bpl.n	8003a70 <_vfiprintf_r+0xe4>
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <_vfiprintf_r+0xe4>
 80039b8:	2300      	movs	r3, #0
 80039ba:	9309      	str	r3, [sp, #36]	; 0x24
 80039bc:	2320      	movs	r3, #32
 80039be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039c2:	2330      	movs	r3, #48	; 0x30
 80039c4:	f04f 0b01 	mov.w	fp, #1
 80039c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039cc:	9503      	str	r5, [sp, #12]
 80039ce:	46b8      	mov	r8, r7
 80039d0:	4645      	mov	r5, r8
 80039d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039d6:	b10b      	cbz	r3, 80039dc <_vfiprintf_r+0x50>
 80039d8:	2b25      	cmp	r3, #37	; 0x25
 80039da:	d154      	bne.n	8003a86 <_vfiprintf_r+0xfa>
 80039dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80039e0:	d00b      	beq.n	80039fa <_vfiprintf_r+0x6e>
 80039e2:	4653      	mov	r3, sl
 80039e4:	463a      	mov	r2, r7
 80039e6:	4621      	mov	r1, r4
 80039e8:	4630      	mov	r0, r6
 80039ea:	f7ff ffbc 	bl	8003966 <__sfputs_r>
 80039ee:	3001      	adds	r0, #1
 80039f0:	f000 80c2 	beq.w	8003b78 <_vfiprintf_r+0x1ec>
 80039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f6:	4453      	add	r3, sl
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
 80039fa:	f898 3000 	ldrb.w	r3, [r8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80ba 	beq.w	8003b78 <_vfiprintf_r+0x1ec>
 8003a04:	2300      	movs	r3, #0
 8003a06:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	9307      	str	r3, [sp, #28]
 8003a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a16:	931a      	str	r3, [sp, #104]	; 0x68
 8003a18:	46a8      	mov	r8, r5
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003a20:	485e      	ldr	r0, [pc, #376]	; (8003b9c <_vfiprintf_r+0x210>)
 8003a22:	f000 fabb 	bl	8003f9c <memchr>
 8003a26:	9b04      	ldr	r3, [sp, #16]
 8003a28:	bb78      	cbnz	r0, 8003a8a <_vfiprintf_r+0xfe>
 8003a2a:	06d9      	lsls	r1, r3, #27
 8003a2c:	bf44      	itt	mi
 8003a2e:	2220      	movmi	r2, #32
 8003a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a34:	071a      	lsls	r2, r3, #28
 8003a36:	bf44      	itt	mi
 8003a38:	222b      	movmi	r2, #43	; 0x2b
 8003a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a3e:	782a      	ldrb	r2, [r5, #0]
 8003a40:	2a2a      	cmp	r2, #42	; 0x2a
 8003a42:	d02a      	beq.n	8003a9a <_vfiprintf_r+0x10e>
 8003a44:	46a8      	mov	r8, r5
 8003a46:	2000      	movs	r0, #0
 8003a48:	250a      	movs	r5, #10
 8003a4a:	9a07      	ldr	r2, [sp, #28]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a52:	3b30      	subs	r3, #48	; 0x30
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	d969      	bls.n	8003b2c <_vfiprintf_r+0x1a0>
 8003a58:	b360      	cbz	r0, 8003ab4 <_vfiprintf_r+0x128>
 8003a5a:	e024      	b.n	8003aa6 <_vfiprintf_r+0x11a>
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <_vfiprintf_r+0x214>)
 8003a5e:	429c      	cmp	r4, r3
 8003a60:	d101      	bne.n	8003a66 <_vfiprintf_r+0xda>
 8003a62:	68b4      	ldr	r4, [r6, #8]
 8003a64:	e7a2      	b.n	80039ac <_vfiprintf_r+0x20>
 8003a66:	4b4f      	ldr	r3, [pc, #316]	; (8003ba4 <_vfiprintf_r+0x218>)
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	bf08      	it	eq
 8003a6c:	68f4      	ldreq	r4, [r6, #12]
 8003a6e:	e79d      	b.n	80039ac <_vfiprintf_r+0x20>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7ff fe6c 	bl	8003750 <__swsetup_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d09d      	beq.n	80039b8 <_vfiprintf_r+0x2c>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	b01d      	add	sp, #116	; 0x74
 8003a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a86:	46a8      	mov	r8, r5
 8003a88:	e7a2      	b.n	80039d0 <_vfiprintf_r+0x44>
 8003a8a:	4a44      	ldr	r2, [pc, #272]	; (8003b9c <_vfiprintf_r+0x210>)
 8003a8c:	4645      	mov	r5, r8
 8003a8e:	1a80      	subs	r0, r0, r2
 8003a90:	fa0b f000 	lsl.w	r0, fp, r0
 8003a94:	4318      	orrs	r0, r3
 8003a96:	9004      	str	r0, [sp, #16]
 8003a98:	e7be      	b.n	8003a18 <_vfiprintf_r+0x8c>
 8003a9a:	9a03      	ldr	r2, [sp, #12]
 8003a9c:	1d11      	adds	r1, r2, #4
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	9103      	str	r1, [sp, #12]
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	db01      	blt.n	8003aaa <_vfiprintf_r+0x11e>
 8003aa6:	9207      	str	r2, [sp, #28]
 8003aa8:	e004      	b.n	8003ab4 <_vfiprintf_r+0x128>
 8003aaa:	4252      	negs	r2, r2
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	9207      	str	r2, [sp, #28]
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	f898 3000 	ldrb.w	r3, [r8]
 8003ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8003aba:	d10e      	bne.n	8003ada <_vfiprintf_r+0x14e>
 8003abc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac2:	d138      	bne.n	8003b36 <_vfiprintf_r+0x1aa>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	f108 0802 	add.w	r8, r8, #2
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	9203      	str	r2, [sp, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bfb8      	it	lt
 8003ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad8:	9305      	str	r3, [sp, #20]
 8003ada:	4d33      	ldr	r5, [pc, #204]	; (8003ba8 <_vfiprintf_r+0x21c>)
 8003adc:	2203      	movs	r2, #3
 8003ade:	f898 1000 	ldrb.w	r1, [r8]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 fa5a 	bl	8003f9c <memchr>
 8003ae8:	b140      	cbz	r0, 8003afc <_vfiprintf_r+0x170>
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	1b40      	subs	r0, r0, r5
 8003aee:	fa03 f000 	lsl.w	r0, r3, r0
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	f108 0801 	add.w	r8, r8, #1
 8003af8:	4303      	orrs	r3, r0
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	f898 1000 	ldrb.w	r1, [r8]
 8003b00:	2206      	movs	r2, #6
 8003b02:	482a      	ldr	r0, [pc, #168]	; (8003bac <_vfiprintf_r+0x220>)
 8003b04:	f108 0701 	add.w	r7, r8, #1
 8003b08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b0c:	f000 fa46 	bl	8003f9c <memchr>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d037      	beq.n	8003b84 <_vfiprintf_r+0x1f8>
 8003b14:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <_vfiprintf_r+0x224>)
 8003b16:	bb1b      	cbnz	r3, 8003b60 <_vfiprintf_r+0x1d4>
 8003b18:	9b03      	ldr	r3, [sp, #12]
 8003b1a:	3307      	adds	r3, #7
 8003b1c:	f023 0307 	bic.w	r3, r3, #7
 8003b20:	3308      	adds	r3, #8
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b26:	444b      	add	r3, r9
 8003b28:	9309      	str	r3, [sp, #36]	; 0x24
 8003b2a:	e750      	b.n	80039ce <_vfiprintf_r+0x42>
 8003b2c:	fb05 3202 	mla	r2, r5, r2, r3
 8003b30:	2001      	movs	r0, #1
 8003b32:	4688      	mov	r8, r1
 8003b34:	e78a      	b.n	8003a4c <_vfiprintf_r+0xc0>
 8003b36:	2300      	movs	r3, #0
 8003b38:	250a      	movs	r5, #10
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f108 0801 	add.w	r8, r8, #1
 8003b40:	9305      	str	r3, [sp, #20]
 8003b42:	4640      	mov	r0, r8
 8003b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b48:	3a30      	subs	r2, #48	; 0x30
 8003b4a:	2a09      	cmp	r2, #9
 8003b4c:	d903      	bls.n	8003b56 <_vfiprintf_r+0x1ca>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c3      	beq.n	8003ada <_vfiprintf_r+0x14e>
 8003b52:	9105      	str	r1, [sp, #20]
 8003b54:	e7c1      	b.n	8003ada <_vfiprintf_r+0x14e>
 8003b56:	fb05 2101 	mla	r1, r5, r1, r2
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	e7f0      	b.n	8003b42 <_vfiprintf_r+0x1b6>
 8003b60:	ab03      	add	r3, sp, #12
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4622      	mov	r2, r4
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <_vfiprintf_r+0x228>)
 8003b68:	a904      	add	r1, sp, #16
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f3af 8000 	nop.w
 8003b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b74:	4681      	mov	r9, r0
 8003b76:	d1d5      	bne.n	8003b24 <_vfiprintf_r+0x198>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	065b      	lsls	r3, r3, #25
 8003b7c:	f53f af7e 	bmi.w	8003a7c <_vfiprintf_r+0xf0>
 8003b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b82:	e77d      	b.n	8003a80 <_vfiprintf_r+0xf4>
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <_vfiprintf_r+0x228>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f000 f888 	bl	8003ca4 <_printf_i>
 8003b94:	e7ec      	b.n	8003b70 <_vfiprintf_r+0x1e4>
 8003b96:	bf00      	nop
 8003b98:	08004744 	.word	0x08004744
 8003b9c:	08004788 	.word	0x08004788
 8003ba0:	08004764 	.word	0x08004764
 8003ba4:	08004724 	.word	0x08004724
 8003ba8:	0800478e 	.word	0x0800478e
 8003bac:	08004792 	.word	0x08004792
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	08003967 	.word	0x08003967

08003bb8 <_printf_common>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	4691      	mov	r9, r2
 8003bbe:	461f      	mov	r7, r3
 8003bc0:	688a      	ldr	r2, [r1, #8]
 8003bc2:	690b      	ldr	r3, [r1, #16]
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bfb8      	it	lt
 8003bca:	4613      	movlt	r3, r2
 8003bcc:	f8c9 3000 	str.w	r3, [r9]
 8003bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bda:	b112      	cbz	r2, 8003be2 <_printf_common+0x2a>
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f8c9 3000 	str.w	r3, [r9]
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	0699      	lsls	r1, r3, #26
 8003be6:	bf42      	ittt	mi
 8003be8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003bec:	3302      	addmi	r3, #2
 8003bee:	f8c9 3000 	strmi.w	r3, [r9]
 8003bf2:	6825      	ldr	r5, [r4, #0]
 8003bf4:	f015 0506 	ands.w	r5, r5, #6
 8003bf8:	d107      	bne.n	8003c0a <_printf_common+0x52>
 8003bfa:	f104 0a19 	add.w	sl, r4, #25
 8003bfe:	68e3      	ldr	r3, [r4, #12]
 8003c00:	f8d9 2000 	ldr.w	r2, [r9]
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	42ab      	cmp	r3, r5
 8003c08:	dc29      	bgt.n	8003c5e <_printf_common+0xa6>
 8003c0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	3300      	adds	r3, #0
 8003c12:	bf18      	it	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	0692      	lsls	r2, r2, #26
 8003c18:	d42e      	bmi.n	8003c78 <_printf_common+0xc0>
 8003c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c1e:	4639      	mov	r1, r7
 8003c20:	4630      	mov	r0, r6
 8003c22:	47c0      	blx	r8
 8003c24:	3001      	adds	r0, #1
 8003c26:	d021      	beq.n	8003c6c <_printf_common+0xb4>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	68e5      	ldr	r5, [r4, #12]
 8003c2c:	f003 0306 	and.w	r3, r3, #6
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	bf18      	it	ne
 8003c34:	2500      	movne	r5, #0
 8003c36:	f8d9 2000 	ldr.w	r2, [r9]
 8003c3a:	f04f 0900 	mov.w	r9, #0
 8003c3e:	bf08      	it	eq
 8003c40:	1aad      	subeq	r5, r5, r2
 8003c42:	68a3      	ldr	r3, [r4, #8]
 8003c44:	6922      	ldr	r2, [r4, #16]
 8003c46:	bf08      	it	eq
 8003c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	bfc4      	itt	gt
 8003c50:	1a9b      	subgt	r3, r3, r2
 8003c52:	18ed      	addgt	r5, r5, r3
 8003c54:	341a      	adds	r4, #26
 8003c56:	454d      	cmp	r5, r9
 8003c58:	d11a      	bne.n	8003c90 <_printf_common+0xd8>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e008      	b.n	8003c70 <_printf_common+0xb8>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4652      	mov	r2, sl
 8003c62:	4639      	mov	r1, r7
 8003c64:	4630      	mov	r0, r6
 8003c66:	47c0      	blx	r8
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d103      	bne.n	8003c74 <_printf_common+0xbc>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	3501      	adds	r5, #1
 8003c76:	e7c2      	b.n	8003bfe <_printf_common+0x46>
 8003c78:	2030      	movs	r0, #48	; 0x30
 8003c7a:	18e1      	adds	r1, r4, r3
 8003c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c86:	4422      	add	r2, r4
 8003c88:	3302      	adds	r3, #2
 8003c8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c8e:	e7c4      	b.n	8003c1a <_printf_common+0x62>
 8003c90:	2301      	movs	r3, #1
 8003c92:	4622      	mov	r2, r4
 8003c94:	4639      	mov	r1, r7
 8003c96:	4630      	mov	r0, r6
 8003c98:	47c0      	blx	r8
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d0e6      	beq.n	8003c6c <_printf_common+0xb4>
 8003c9e:	f109 0901 	add.w	r9, r9, #1
 8003ca2:	e7d8      	b.n	8003c56 <_printf_common+0x9e>

08003ca4 <_printf_i>:
 8003ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cac:	460c      	mov	r4, r1
 8003cae:	7e09      	ldrb	r1, [r1, #24]
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	296e      	cmp	r1, #110	; 0x6e
 8003cb4:	4617      	mov	r7, r2
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	4698      	mov	r8, r3
 8003cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cbc:	f000 80b3 	beq.w	8003e26 <_printf_i+0x182>
 8003cc0:	d822      	bhi.n	8003d08 <_printf_i+0x64>
 8003cc2:	2963      	cmp	r1, #99	; 0x63
 8003cc4:	d036      	beq.n	8003d34 <_printf_i+0x90>
 8003cc6:	d80a      	bhi.n	8003cde <_printf_i+0x3a>
 8003cc8:	2900      	cmp	r1, #0
 8003cca:	f000 80b9 	beq.w	8003e40 <_printf_i+0x19c>
 8003cce:	2958      	cmp	r1, #88	; 0x58
 8003cd0:	f000 8083 	beq.w	8003dda <_printf_i+0x136>
 8003cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003cdc:	e032      	b.n	8003d44 <_printf_i+0xa0>
 8003cde:	2964      	cmp	r1, #100	; 0x64
 8003ce0:	d001      	beq.n	8003ce6 <_printf_i+0x42>
 8003ce2:	2969      	cmp	r1, #105	; 0x69
 8003ce4:	d1f6      	bne.n	8003cd4 <_printf_i+0x30>
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	6813      	ldr	r3, [r2, #0]
 8003cea:	0605      	lsls	r5, r0, #24
 8003cec:	f103 0104 	add.w	r1, r3, #4
 8003cf0:	d52a      	bpl.n	8003d48 <_printf_i+0xa4>
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6011      	str	r1, [r2, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da03      	bge.n	8003d02 <_printf_i+0x5e>
 8003cfa:	222d      	movs	r2, #45	; 0x2d
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d02:	486f      	ldr	r0, [pc, #444]	; (8003ec0 <_printf_i+0x21c>)
 8003d04:	220a      	movs	r2, #10
 8003d06:	e039      	b.n	8003d7c <_printf_i+0xd8>
 8003d08:	2973      	cmp	r1, #115	; 0x73
 8003d0a:	f000 809d 	beq.w	8003e48 <_printf_i+0x1a4>
 8003d0e:	d808      	bhi.n	8003d22 <_printf_i+0x7e>
 8003d10:	296f      	cmp	r1, #111	; 0x6f
 8003d12:	d020      	beq.n	8003d56 <_printf_i+0xb2>
 8003d14:	2970      	cmp	r1, #112	; 0x70
 8003d16:	d1dd      	bne.n	8003cd4 <_printf_i+0x30>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	f043 0320 	orr.w	r3, r3, #32
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	e003      	b.n	8003d2a <_printf_i+0x86>
 8003d22:	2975      	cmp	r1, #117	; 0x75
 8003d24:	d017      	beq.n	8003d56 <_printf_i+0xb2>
 8003d26:	2978      	cmp	r1, #120	; 0x78
 8003d28:	d1d4      	bne.n	8003cd4 <_printf_i+0x30>
 8003d2a:	2378      	movs	r3, #120	; 0x78
 8003d2c:	4865      	ldr	r0, [pc, #404]	; (8003ec4 <_printf_i+0x220>)
 8003d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d32:	e055      	b.n	8003de0 <_printf_i+0x13c>
 8003d34:	6813      	ldr	r3, [r2, #0]
 8003d36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d3a:	1d19      	adds	r1, r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6011      	str	r1, [r2, #0]
 8003d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d44:	2301      	movs	r3, #1
 8003d46:	e08c      	b.n	8003e62 <_printf_i+0x1be>
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d4e:	6011      	str	r1, [r2, #0]
 8003d50:	bf18      	it	ne
 8003d52:	b21b      	sxthne	r3, r3
 8003d54:	e7cf      	b.n	8003cf6 <_printf_i+0x52>
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	6825      	ldr	r5, [r4, #0]
 8003d5a:	1d18      	adds	r0, r3, #4
 8003d5c:	6010      	str	r0, [r2, #0]
 8003d5e:	0628      	lsls	r0, r5, #24
 8003d60:	d501      	bpl.n	8003d66 <_printf_i+0xc2>
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	e002      	b.n	8003d6c <_printf_i+0xc8>
 8003d66:	0668      	lsls	r0, r5, #25
 8003d68:	d5fb      	bpl.n	8003d62 <_printf_i+0xbe>
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	296f      	cmp	r1, #111	; 0x6f
 8003d6e:	bf14      	ite	ne
 8003d70:	220a      	movne	r2, #10
 8003d72:	2208      	moveq	r2, #8
 8003d74:	4852      	ldr	r0, [pc, #328]	; (8003ec0 <_printf_i+0x21c>)
 8003d76:	2100      	movs	r1, #0
 8003d78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d7c:	6865      	ldr	r5, [r4, #4]
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	60a5      	str	r5, [r4, #8]
 8003d82:	f2c0 8095 	blt.w	8003eb0 <_printf_i+0x20c>
 8003d86:	6821      	ldr	r1, [r4, #0]
 8003d88:	f021 0104 	bic.w	r1, r1, #4
 8003d8c:	6021      	str	r1, [r4, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d13d      	bne.n	8003e0e <_printf_i+0x16a>
 8003d92:	2d00      	cmp	r5, #0
 8003d94:	f040 808e 	bne.w	8003eb4 <_printf_i+0x210>
 8003d98:	4665      	mov	r5, ip
 8003d9a:	2a08      	cmp	r2, #8
 8003d9c:	d10b      	bne.n	8003db6 <_printf_i+0x112>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	07db      	lsls	r3, r3, #31
 8003da2:	d508      	bpl.n	8003db6 <_printf_i+0x112>
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	bfde      	ittt	le
 8003dac:	2330      	movle	r3, #48	; 0x30
 8003dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003db2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db6:	ebac 0305 	sub.w	r3, ip, r5
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	f8cd 8000 	str.w	r8, [sp]
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	aa03      	add	r2, sp, #12
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f7ff fef6 	bl	8003bb8 <_printf_common>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d14d      	bne.n	8003e6c <_printf_i+0x1c8>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	b005      	add	sp, #20
 8003dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dda:	4839      	ldr	r0, [pc, #228]	; (8003ec0 <_printf_i+0x21c>)
 8003ddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003de0:	6813      	ldr	r3, [r2, #0]
 8003de2:	6821      	ldr	r1, [r4, #0]
 8003de4:	1d1d      	adds	r5, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6015      	str	r5, [r2, #0]
 8003dea:	060a      	lsls	r2, r1, #24
 8003dec:	d50b      	bpl.n	8003e06 <_printf_i+0x162>
 8003dee:	07ca      	lsls	r2, r1, #31
 8003df0:	bf44      	itt	mi
 8003df2:	f041 0120 	orrmi.w	r1, r1, #32
 8003df6:	6021      	strmi	r1, [r4, #0]
 8003df8:	b91b      	cbnz	r3, 8003e02 <_printf_i+0x15e>
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	f022 0220 	bic.w	r2, r2, #32
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	2210      	movs	r2, #16
 8003e04:	e7b7      	b.n	8003d76 <_printf_i+0xd2>
 8003e06:	064d      	lsls	r5, r1, #25
 8003e08:	bf48      	it	mi
 8003e0a:	b29b      	uxthmi	r3, r3
 8003e0c:	e7ef      	b.n	8003dee <_printf_i+0x14a>
 8003e0e:	4665      	mov	r5, ip
 8003e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e14:	fb02 3311 	mls	r3, r2, r1, r3
 8003e18:	5cc3      	ldrb	r3, [r0, r3]
 8003e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e1e:	460b      	mov	r3, r1
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d1f5      	bne.n	8003e10 <_printf_i+0x16c>
 8003e24:	e7b9      	b.n	8003d9a <_printf_i+0xf6>
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	1d18      	adds	r0, r3, #4
 8003e2c:	6961      	ldr	r1, [r4, #20]
 8003e2e:	6010      	str	r0, [r2, #0]
 8003e30:	0628      	lsls	r0, r5, #24
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	d501      	bpl.n	8003e3a <_printf_i+0x196>
 8003e36:	6019      	str	r1, [r3, #0]
 8003e38:	e002      	b.n	8003e40 <_printf_i+0x19c>
 8003e3a:	066a      	lsls	r2, r5, #25
 8003e3c:	d5fb      	bpl.n	8003e36 <_printf_i+0x192>
 8003e3e:	8019      	strh	r1, [r3, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	4665      	mov	r5, ip
 8003e44:	6123      	str	r3, [r4, #16]
 8003e46:	e7b9      	b.n	8003dbc <_printf_i+0x118>
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	1d19      	adds	r1, r3, #4
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	681d      	ldr	r5, [r3, #0]
 8003e50:	6862      	ldr	r2, [r4, #4]
 8003e52:	2100      	movs	r1, #0
 8003e54:	4628      	mov	r0, r5
 8003e56:	f000 f8a1 	bl	8003f9c <memchr>
 8003e5a:	b108      	cbz	r0, 8003e60 <_printf_i+0x1bc>
 8003e5c:	1b40      	subs	r0, r0, r5
 8003e5e:	6060      	str	r0, [r4, #4]
 8003e60:	6863      	ldr	r3, [r4, #4]
 8003e62:	6123      	str	r3, [r4, #16]
 8003e64:	2300      	movs	r3, #0
 8003e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e6a:	e7a7      	b.n	8003dbc <_printf_i+0x118>
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4639      	mov	r1, r7
 8003e72:	4630      	mov	r0, r6
 8003e74:	47c0      	blx	r8
 8003e76:	3001      	adds	r0, #1
 8003e78:	d0aa      	beq.n	8003dd0 <_printf_i+0x12c>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	079b      	lsls	r3, r3, #30
 8003e7e:	d413      	bmi.n	8003ea8 <_printf_i+0x204>
 8003e80:	68e0      	ldr	r0, [r4, #12]
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	4298      	cmp	r0, r3
 8003e86:	bfb8      	it	lt
 8003e88:	4618      	movlt	r0, r3
 8003e8a:	e7a3      	b.n	8003dd4 <_printf_i+0x130>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	464a      	mov	r2, r9
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d09a      	beq.n	8003dd0 <_printf_i+0x12c>
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	68e3      	ldr	r3, [r4, #12]
 8003e9e:	9a03      	ldr	r2, [sp, #12]
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	42ab      	cmp	r3, r5
 8003ea4:	dcf2      	bgt.n	8003e8c <_printf_i+0x1e8>
 8003ea6:	e7eb      	b.n	8003e80 <_printf_i+0x1dc>
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	f104 0919 	add.w	r9, r4, #25
 8003eae:	e7f5      	b.n	8003e9c <_printf_i+0x1f8>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ac      	bne.n	8003e0e <_printf_i+0x16a>
 8003eb4:	7803      	ldrb	r3, [r0, #0]
 8003eb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ebe:	e76c      	b.n	8003d9a <_printf_i+0xf6>
 8003ec0:	08004799 	.word	0x08004799
 8003ec4:	080047aa 	.word	0x080047aa

08003ec8 <_putc_r>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	460d      	mov	r5, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	4606      	mov	r6, r0
 8003ed0:	b118      	cbz	r0, 8003eda <_putc_r+0x12>
 8003ed2:	6983      	ldr	r3, [r0, #24]
 8003ed4:	b90b      	cbnz	r3, 8003eda <_putc_r+0x12>
 8003ed6:	f7ff f997 	bl	8003208 <__sinit>
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <_putc_r+0x60>)
 8003edc:	429c      	cmp	r4, r3
 8003ede:	d112      	bne.n	8003f06 <_putc_r+0x3e>
 8003ee0:	6874      	ldr	r4, [r6, #4]
 8003ee2:	68a3      	ldr	r3, [r4, #8]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	da16      	bge.n	8003f1a <_putc_r+0x52>
 8003eec:	69a2      	ldr	r2, [r4, #24]
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	db02      	blt.n	8003ef8 <_putc_r+0x30>
 8003ef2:	b2eb      	uxtb	r3, r5
 8003ef4:	2b0a      	cmp	r3, #10
 8003ef6:	d110      	bne.n	8003f1a <_putc_r+0x52>
 8003ef8:	4622      	mov	r2, r4
 8003efa:	4629      	mov	r1, r5
 8003efc:	4630      	mov	r0, r6
 8003efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f02:	f7ff bbc1 	b.w	8003688 <__swbuf_r>
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <_putc_r+0x64>)
 8003f08:	429c      	cmp	r4, r3
 8003f0a:	d101      	bne.n	8003f10 <_putc_r+0x48>
 8003f0c:	68b4      	ldr	r4, [r6, #8]
 8003f0e:	e7e8      	b.n	8003ee2 <_putc_r+0x1a>
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <_putc_r+0x68>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	bf08      	it	eq
 8003f16:	68f4      	ldreq	r4, [r6, #12]
 8003f18:	e7e3      	b.n	8003ee2 <_putc_r+0x1a>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	b2e8      	uxtb	r0, r5
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	701d      	strb	r5, [r3, #0]
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
 8003f26:	bf00      	nop
 8003f28:	08004744 	.word	0x08004744
 8003f2c:	08004764 	.word	0x08004764
 8003f30:	08004724 	.word	0x08004724

08003f34 <_read_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4605      	mov	r5, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4c05      	ldr	r4, [pc, #20]	; (8003f54 <_read_r+0x20>)
 8003f40:	6022      	str	r2, [r4, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fe ff25 	bl	8002d92 <_read>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_read_r+0x1e>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_read_r+0x1e>
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000f58 	.word	0x20000f58

08003f58 <_fstat_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4c06      	ldr	r4, [pc, #24]	; (8003f78 <_fstat_r+0x20>)
 8003f5e:	4605      	mov	r5, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	f7fe ff58 	bl	8002e1a <_fstat>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	d102      	bne.n	8003f74 <_fstat_r+0x1c>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	b103      	cbz	r3, 8003f74 <_fstat_r+0x1c>
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	20000f58 	.word	0x20000f58

08003f7c <_isatty_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	2300      	movs	r3, #0
 8003f80:	4c05      	ldr	r4, [pc, #20]	; (8003f98 <_isatty_r+0x1c>)
 8003f82:	4605      	mov	r5, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	f7fe ff56 	bl	8002e38 <_isatty>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_isatty_r+0x1a>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_isatty_r+0x1a>
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000f58 	.word	0x20000f58

08003f9c <memchr>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	b2c9      	uxtb	r1, r1
 8003fa0:	4402      	add	r2, r0
 8003fa2:	4290      	cmp	r0, r2
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	d101      	bne.n	8003fac <memchr+0x10>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e003      	b.n	8003fb4 <memchr+0x18>
 8003fac:	781c      	ldrb	r4, [r3, #0]
 8003fae:	3001      	adds	r0, #1
 8003fb0:	428c      	cmp	r4, r1
 8003fb2:	d1f6      	bne.n	8003fa2 <memchr+0x6>
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	bd10      	pop	{r4, pc}

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
